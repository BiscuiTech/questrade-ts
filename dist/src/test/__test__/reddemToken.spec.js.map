{"version":3,"file":"reddemToken.spec.js","sourceRoot":"","sources":["../../../../src/test/__test__/reddemToken.spec.ts"],"names":[],"mappings":";;;AAAA,2BAAoC;AACpC,qCAAoC;AAEpC,QAAQ,CAAC,eAAe,EAAE;IACxB,EAAE,CAAC,8CAA8C,EAAE,UAAM,IAAI;;;;;;oBAGzD,oBAAoB,GAAG,IAAI,CAAC;oBACG,qBAAM,eAAW,CAAC,EAAE,CAAC,EAAA;;oBAA9C,KAAyB,SAAqB,EAA5C,KAAK,WAAA,EAAE,WAAW,iBAAA;oBAC1B,aAAK,CAAC,CAAC,KAAK,EAAE,WAAW,CAAC,CAAC,CAAC;;;;oBAE5B,OAAO,CAAC,KAAK,CAAC,GAAC,CAAC,OAAO,CAAC,CAAC;oBACzB,oBAAoB,GAAG,KAAK,CAAC;;;oBAE/B,MAAM,CAAC,oBAAoB,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;oBACzC,IAAI,EAAE,CAAC;;;;SACR,CAAC,CAAC;IAEH,EAAE,CAAC,oCAAoC,EAAE,UAAM,IAAI;;;;wBACzB,qBAAM,eAAW,CAAC;wBACxC,OAAO,EAAE,QAAQ;wBACjB,UAAU,EAAE,IAAI;wBAChB,IAAI,EAAE,KAAK;wBACX,eAAe,EAAE,KAAK;wBACtB,SAAS,EAAE,MAAM;wBACjB,OAAO,EAAE,UAAU;qBACpB,CAAC,EAAA;;oBAPM,WAAW,GAAK,CAAA,SAOtB,CAAA,YAPiB;oBAQnB,aAAK,CAAC,WAAW,CAAC,CAAC;oBACnB,IAAI,EAAE,CAAC;;;;SACR,CAAC,CAAC;IACH,EAAE,CAAC,kDAAkD,EAAE,UAAM,IAAI;;;;wBACvC,qBAAM,eAAW,CAAC;wBACxC,OAAO,EAAE,QAAQ;wBACjB,UAAU,EAAE,IAAI;wBAChB,IAAI,EAAE,KAAK;wBACX,eAAe,EAAE,IAAI;wBACrB,SAAS,EAAE,MAAM;wBACjB,OAAO,EAAE,UAAU;qBACpB,CAAC,EAAA;;oBAPM,WAAW,GAAK,CAAA,SAOtB,CAAA,YAPiB;oBAQnB,aAAK,CAAC,WAAW,CAAC,CAAC;oBACnB,IAAI,EAAE,CAAC;;;;SACR,CAAC,CAAC;IAEH,EAAE,CAAC,0DAA0D,EAAE,UAAM,IAAI;;;;wBAC/C,qBAAM,eAAW,CAAC;wBACxC,OAAO,EAAE,QAAQ;wBACjB,IAAI,EAAE,KAAK;wBACX,eAAe,EAAE,IAAI;wBACrB,SAAS,EAAE,MAAM;wBACjB,OAAO,EAAE,UAAU;qBACpB,CAAC,EAAA;;oBANM,WAAW,GAAK,CAAA,SAMtB,CAAA,YANiB;oBAOnB,MAAM,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;oBAC1C,aAAK,CAAC,WAAW,CAAC,CAAC;oBACnB,IAAI,EAAE,CAAC;;;;SACR,CAAC,CAAC;IACH,EAAE,CAAC,2EAA2E,EAAE,UAAM,IAAI;;;;wBACpE,qBAAM,eAAW,CACnC,+CAA+C,CAChD,EAAA;;oBAFK,WAAW,GAAG,SAEnB;oBAED,aAAK,CAAC,WAAW,CAAC,CAAC;oBACnB,IAAI,EAAE,CAAC;;;;SACR,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import { redeemToken } from '../..';\nimport { void0 } from '../../utils';\n\ndescribe('Redeem Token ', () => {\n  it('should not be able to recive an empty string', async done => {\n    let canReciveEmptyString: boolean;\n    try {\n      canReciveEmptyString = true;\n      const { qtApi, credentials } = await redeemToken('');\n      void0([qtApi, credentials]);\n    } catch (e) {\n      console.error(e.message);\n      canReciveEmptyString = false;\n    }\n    expect(canReciveEmptyString).toBe(false);\n    done();\n  });\n\n  it('should be able to recive a keyfile', async done => {\n    const { credentials } = await redeemToken({\n      account: 12345678,\n      apiVersion: 'v1',\n      test: false,\n      practiceAccount: false,\n      seedToken: 'MOCK',\n      keyFile: 'MOCKfile',\n    });\n    void0(credentials);\n    done();\n  });\n  it('should be able to recive practice account = true', async done => {\n    const { credentials } = await redeemToken({\n      account: 12345678,\n      apiVersion: 'v1',\n      test: false,\n      practiceAccount: true,\n      seedToken: 'MOCK',\n      keyFile: 'MOCKfile',\n    });\n    void0(credentials);\n    done();\n  });\n\n  it('should be able to recive no apiVersion and default to v1', async done => {\n    const { credentials } = await redeemToken({\n      account: 12345678,\n      test: false,\n      practiceAccount: true,\n      seedToken: 'MOCK',\n      keyFile: 'MOCKfile',\n    });\n    expect(credentials.apiVersion).toBe('v1');\n    void0(credentials);\n    done();\n  });\n  it('should not be able to recive a file path as a string containing the token', async done => {\n    const credentials = await redeemToken(\n      './keys/RocgyhkqWp-USE-YOUR-OWN-TOKEN-M3BSDjd0'\n    );\n\n    void0(credentials);\n    done();\n  });\n});\n"]}