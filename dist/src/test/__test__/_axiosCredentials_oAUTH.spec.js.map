{"version":3,"file":"_axiosCredentials_oAUTH.spec.js","sourceRoot":"","sources":["../../../../src/test/__test__/_axiosCredentials_oAUTH.spec.ts"],"names":[],"mappings":";;;AAAA,oFAAmF;AACnF,4EAA0E;AAC1E,qCAAoC;AAEpC,QAAQ,CAAC,6CAA6C,EAAE;IACtD,EAAE,CAAC,mCAAmC,EAAE,UAAM,IAAI;;;;wBAC5B,qBAAM,+CAAsB,CAAC;wBAC/C,OAAO,EAAE,QAAQ;wBACjB,UAAU,EAAE,IAAI;wBAChB,IAAI,EAAE,KAAK;wBACX,eAAe,EAAE,KAAK;wBACtB,SAAS,EAAE,MAAM;wBACjB,MAAM,EAAE,gBAAgB;qBACzB,CAAC,EAAA;;oBAPI,WAAW,GAAG,SAOlB;oBACF,4BAA4B;oBAC5B,aAAK,CAAC,WAAW,CAAC,CAAC;oBACnB,IAAI,EAAE,CAAC;;;;SACR,CAAC,CAAC;IACH,EAAE,CAAC,oCAAoC,EAAE,UAAM,IAAI;;;;wBAC7B,qBAAM,+CAAsB,CAAC;wBAC/C,OAAO,EAAE,QAAQ;wBACjB,UAAU,EAAE,IAAI;wBAChB,IAAI,EAAE,KAAK;wBACX,eAAe,EAAE,KAAK;wBACtB,SAAS,EAAE,MAAM;wBACjB,OAAO,EAAE,UAAU;qBACpB,CAAC,EAAA;;oBAPI,WAAW,GAAG,SAOlB;oBACF,4BAA4B;oBAC5B,aAAK,CAAC,WAAW,CAAC,CAAC;oBACnB,IAAI,EAAE,CAAC;;;;SACR,CAAC,CAAC;IACH,EAAE,CAAC,8CAA8C,EAAE,UAAM,IAAI;;;;;oBAEvD,WAAW,GAAG,sCAAiB,EAAE,CAAC;;;;oBAEpC,oBAAoB,GAAG,IAAI,CAAC;oBACd,qBAAM,+CAAsB,CAAC,EAAE,CAAC,EAAA;;oBAA9C,WAAW,GAAG,SAAgC,CAAC;;;;oBAE/C,OAAO,CAAC,KAAK,CAAC,GAAC,CAAC,OAAO,CAAC,CAAC;oBACzB,oBAAoB,GAAG,KAAK,CAAC;;;oBAE/B,MAAM,CAAC,oBAAoB,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;oBACzC,aAAK,CAAC,WAAW,CAAC,CAAC;oBACnB,IAAI,EAAE,CAAC;;;;SACR,CAAC,CAAC;IACH,EAAE,CAAC,sDAAsD,EAAE,UAAM,IAAI;;;;wBAC/C,qBAAM,+CAAsB,CAAC;wBAC/C,OAAO,EAAE,EAAE;wBACX,UAAU,EAAE,IAAI;wBAChB,IAAI,EAAE,KAAK;wBACX,eAAe,EAAE,KAAK;wBACtB,SAAS,EAAE,MAAM;wBACjB,OAAO,EAAE,UAAU;qBACpB,CAAC,EAAA;;oBAPI,WAAW,GAAG,SAOlB;oBACF,4BAA4B;oBAC5B,aAAK,CAAC,WAAW,CAAC,CAAC;oBACnB,IAAI,EAAE,CAAC;;;;SACR,CAAC,CAAC;IAEH,EAAE,CAAC,2EAA2E,EAAE,UAAM,IAAI;;;;wBACpE,qBAAM,+CAAsB,CAAC,aAAa,CAAC,EAAA;;oBAAzD,WAAW,GAAG,SAA2C;oBAC/D,4BAA4B;oBAC5B,aAAK,CAAC,WAAW,CAAC,CAAC;oBACnB,IAAI,EAAE,CAAC;;;;SACR,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import { _oAuthAxiosCredentials } from '../../private/auth/axiosCredentials_oAUTH';\nimport { _emptyCredentials } from '../../private/auth/credentialsFactory';\nimport { void0 } from '../../utils';\n\ndescribe('auth Credential from QuestradeApi via AXIOS', () => {\n  it('should be able to recive a keydir', async done => {\n    const credentials = await _oAuthAxiosCredentials({\n      account: 12345678,\n      apiVersion: 'v1',\n      test: false,\n      practiceAccount: false,\n      seedToken: 'MOCK',\n      keyDir: './keys/MOCKdir',\n    });\n    // console.log(credentials);\n    void0(credentials);\n    done();\n  });\n  it('should be able to recive a keyfile', async done => {\n    const credentials = await _oAuthAxiosCredentials({\n      account: 12345678,\n      apiVersion: 'v1',\n      test: false,\n      practiceAccount: false,\n      seedToken: 'MOCK',\n      keyFile: 'MOCKfile',\n    });\n    // console.log(credentials);\n    void0(credentials);\n    done();\n  });\n  it('should not be able to recive an empty string', async done => {\n    let canReciveEmptyString: boolean;\n    let credentials = _emptyCredentials();\n    try {\n      canReciveEmptyString = true;\n      credentials = await _oAuthAxiosCredentials('');\n    } catch (e) {\n      console.error(e.message);\n      canReciveEmptyString = false;\n    }\n    expect(canReciveEmptyString).toBe(false);\n    void0(credentials);\n    done();\n  });\n  it('should not be able to recive an empty account number', async done => {\n    const credentials = await _oAuthAxiosCredentials({\n      account: '',\n      apiVersion: 'v1',\n      test: false,\n      practiceAccount: false,\n      seedToken: 'MOCK',\n      keyFile: 'MOCKfile',\n    });\n    // console.log(credentials);\n    void0(credentials);\n    done();\n  });\n\n  it('should not be able to recive a file path as a string containing the token', async done => {\n    const credentials = await _oAuthAxiosCredentials('./keys/MOCK');\n    // console.log(credentials);\n    void0(credentials);\n    done();\n  });\n});\n"]}