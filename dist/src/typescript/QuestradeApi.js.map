{"version":3,"file":"QuestradeApi.js","sourceRoot":"","sources":["../../../src/typescript/QuestradeApi.ts"],"names":[],"mappings":"","sourcesContent":["import {\n  IAccount,\n  IAccountActivity,\n  IBalances,\n  ICandle,\n  IExecution,\n  IMarket,\n  IOptionChain,\n  IOptionsQuotes,\n  IOrder,\n  IPosition,\n  IQuote,\n  IStrategiesQuotes,\n  ISymbol,\n  ISymbolSearchResult,\n  OptionsFilters,\n  StrategyVariantRequest,\n} from '.';\nimport { IMyBalances } from './IMyBalances';\n\n// DateRange<R>\nexport type DateRange<R> = (startTime: string) => (endTime: string) => R;\n\nexport interface IQuestradeApi {\n  currentAccount: string;\n  myBalances: IQtApiMyBalances;\n  serverTime: Date;\n  get: IQtApiGet;\n}\nexport type IQtApiMyBalances = () => Promise<IMyBalances>;\nexport interface IQtApiGet {\n  account: IQtApiAccount;\n  market: IQtApiMarket;\n  quotes: IQtApiQuotes;\n  search: IQtApiSearch;\n  symbols: IQtApiSymbols;\n}\nexport interface IQtApiAccount {\n  activities(\n    startTime: string\n  ): (endTime: string) => Promise<IAccountActivity[]>;\n\n  allAccounts(): Promise<IAccount[]>;\n\n  balances(): Promise<IBalances>;\n\n  executions(startTime: string): (endTime: string) => Promise<IExecution[]>;\n\n  orders(stateFilter?: string | undefined): DateRange<Promise<IOrder[]>>;\n\n  ordersByIds(orderId: number[]): Promise<IOrder[]>;\n\n  positions(): Promise<IPosition[]>;\n}\n\nexport interface IQtApiMarket {\n  allMarkets(): Promise<IMarket[]>;\n  candlesByStockId(\n    symbolID: number\n  ): (interval?: string | undefined) => DateRange<Promise<ICandle[]>>;\n}\nexport interface IQtApiQuotes {\n  optionsQuotes: IQtApiOptionsQuotes;\n  byStrategies(\n    strategyVariantRequestData: StrategyVariantRequest\n  ): Promise<IStrategiesQuotes>;\n\n  byStockIds(ids: number[]): Promise<IQuote[]>;\n}\n\nexport interface IQtApiOptionsQuotes {\n  fromFilter(filters: OptionsFilters): Promise<IOptionsQuotes>;\n  byOptionsIds(optionIds: number[]): Promise<IOptionsQuotes>;\n}\nexport interface IQtApiSearch {\n  stock(\n    prefix: string,\n    offset?: number | undefined\n  ): Promise<ISymbolSearchResult>;\n  allStocks(\n    prefix: string,\n    offset?: number | undefined\n  ): Promise<ISymbolSearchResult[]>;\n  countResults(prefix: string): Promise<number>;\n}\nexport interface IQtApiSymbols {\n  optionChains: IQtApiOptionChains;\n  byStockIds(stockIds: number[]): Promise<ISymbol[]>;\n}\n\nexport interface IQtApiOptionChains {\n  byStockId(stockId: number): Promise<IOptionChain[]>;\n}\n"]}