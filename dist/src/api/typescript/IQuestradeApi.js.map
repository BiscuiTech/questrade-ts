{"version":3,"file":"IQuestradeApi.js","sourceRoot":"","sources":["../../../../src/api/typescript/IQuestradeApi.ts"],"names":[],"mappings":"","sourcesContent":["import {\n  IAccount,\n  IAccountActivity,\n  IBalance,\n  IBalances,\n  ICandle,\n  IExecution,\n  IMarket,\n  IOptionChain,\n  IOptionsQuotes,\n  IOrder,\n  IPosition,\n  IQuote,\n  IStrategiesQuotes,\n  ISymbol,\n  ISymbolSearchResult,\n  OptionsFilters,\n  StrategyVariantRequest,\n} from '.';\n\nexport interface IMyBalances {\n  perCurrency: {\n    CAD: {\n      startOfDay: IBalance;\n      current: IBalance;\n    };\n    USD: {\n      startOfDay: IBalance;\n      current: IBalance;\n    };\n  };\n  combined: {\n    CAD: {\n      startOfDay: IBalance;\n      current: IBalance;\n    };\n    USD: {\n      startOfDay: IBalance;\n      current: IBalance;\n    };\n  };\n  current: {\n    perCurrency: {\n      CAD: IBalance;\n      USD: IBalance;\n    };\n    combined: {\n      CAD: IBalance;\n      USD: IBalance;\n    };\n  };\n  startOfDay: {\n    combined: {\n      CAD: IBalance;\n      USD: IBalance;\n    };\n    perCurrency: {\n      CAD: IBalance;\n      USD: IBalance;\n    };\n  };\n  CAD: {\n    perCurrency: {\n      startOfDay: IBalance;\n      current: IBalance;\n    };\n    combined: {\n      startOfDay: IBalance;\n      current: IBalance;\n    };\n  };\n  USD: {\n    combined: {\n      startOfDay: IBalance;\n      current: IBalance;\n    };\n    perCurrency: {\n      startOfDay: IBalance;\n      current: IBalance;\n    };\n  };\n}\nexport interface IQuestradeApi {\n  currentAccount: string;\n  myBalances: IMyBalances;\n  serverTime: Date;\n  get: {\n    account: {\n      allAccounts(): Promise<IAccount[]>;\n\n      balances(): Promise<IBalances>;\n\n      executions(startTime: string): (endDate: string) => Promise<IExecution[]>;\n\n      orders(\n        stateFilter?: string | undefined\n      ): (startDate: string) => (endDate: string) => Promise<IOrder[]>;\n\n      allOrders(startTime: string): (endDate: string) => Promise<IOrder[]>;\n\n      ordersByIds(orderId: number[]): Promise<IOrder[]>;\n\n      positions(): Promise<IPosition[]>;\n\n      activities(\n        startTime: string\n      ): (endTime: string) => Promise<IAccountActivity[]>;\n    };\n    market: {\n      allMarkets(): Promise<IMarket[]>;\n      candlesByStockId(\n        startDate: string\n      ): (\n        endDate: string\n      ) => (\n        interval?: string | undefined\n      ) => (symbolID: number) => Promise<ICandle[]>;\n    };\n    quotes: {\n      optionsQuotes: {\n        fromFilter(filters: OptionsFilters): Promise<IOptionsQuotes>;\n        byOptionsIds(optionIds: number[]): Promise<IOptionsQuotes>;\n      };\n      byStrategies(\n        strategyVariantRequestData: StrategyVariantRequest\n      ): Promise<IStrategiesQuotes>;\n\n      byStockIds(ids: number[]): Promise<IQuote[]>;\n    };\n    search: {\n      stock(\n        prefix: string,\n        offset?: number | undefined\n      ): Promise<ISymbolSearchResult>;\n      allStocks(\n        prefix: string,\n        offset?: number | undefined\n      ): Promise<ISymbolSearchResult[]>;\n      countResults(prefix: string): Promise<number>;\n    };\n    symbols: {\n      optionChains: {\n        byStockId(stockId: number): Promise<IOptionChain[]>;\n      };\n      byStockIds(stockIds: number[]): Promise<ISymbol[]>;\n    };\n  };\n}\n"]}