{"version":3,"file":"_getQuestradeApi.js","sourceRoot":"","sources":["../../../../../src/api/private/QuestradeApi_QtApi/_getQuestradeApi.ts"],"names":[],"mappings":";;;AAMA,qCAAoC;AACpC,iDAUyB;AACzB,+CAawB;AAEX,QAAA,gBAAgB,GAAG,UAC9B,WAAwB;;;;;gBA8ClB,KAqBF;oBACF,4BAAY,CAAC,WAAW,CAAC;oBACzB,8BAAc,CAAC,WAAW,CAAC;oBAC3B,4BAAY,CAAC,WAAW,CAAC;oBACzB,0BAAW,CAAC,WAAW,CAAC;oBACxB,8BAAc,CAAC,WAAW,CAAC;oBAC3B,0BAAW,CAAC,WAAW,CAAC;oBACxB,0CAA2B,CAAC,WAAW,CAAC;oBACxC,8BAAe,CAAC,WAAW,CAAC;oBAC5B,0BAAU,CAAC,WAAW,CAAC;oBACvB,+BAAe,CAAC,WAAW,CAAC;oBAC5B,6BAAa,CAAC,WAAW,CAAC;oBAC1B,8BAAe,CAAC,WAAW,CAAC;oBAC5B,8CAA+B,CAAC,WAAW,CAAC;oBAC5C,qCAAsB,CAAC,WAAW,CAAC;oBACnC,sCAAuB,CAAC,WAAW,CAAC;oBACpC,8BAAc,CAAC,WAAW,CAAC;oBAC3B,+BAAgB,CAAC,WAAW,CAAC;oBAC7B,kCAAmB,CAAC,WAAW,CAAC;oBAChC,uCAAwB,CAAC,WAAW,CAAC;oBACrC,oCAAqB,CAAC,WAAW,CAAC;iBACnC,EAzCC,QAAQ,QAAA,EACR,UAAU,QAAA,EACV,QAAQ,QAAA,EACR,OAAO,QAAA,EACP,UAAU,QAAA,EACV,OAAO,QAAA,EACP,uBAAuB,QAAA,EACvB,WAAW,QAAA,EACX,MAAM,QAAA,EACN,WAAW,QAAA,EACX,SAAS,SAAA,EACT,WAAW,SAAA,EACX,2BAA2B,SAAA,EAC3B,kBAAkB,SAAA,EAClB,mBAAmB,SAAA,EACnB,UAAU,SAAA,EACV,YAAY,SAAA,EACZ,eAAe,SAAA,EACf,oBAAoB,SAAA,EACpB,iBAAiB,SAAA,CAsBjB;gBACF,wBAAwB;gBACxB,aAAK,CAAC,2BAA2B,CAAC,CAAC;;oBAG3B,UAAU;;;;;;wCACP,KAAA,2BAAW,CAAA;wCAAC,qBAAM,QAAQ,EAAE,EAAA;4CAAnC,sBAAO,kBAAY,SAAgB,EAAC,EAAC;;;;qBACtC;oBACD,cAAc,EAAE,WAAW,CAAC,aAAa;;gBAC7B,qBAAM,UAAU,EAAE,EAAA;oBALhC,uBAKE,aAAU,GAAE,SAAkB;oBAC9B,MAAG,GAAE;wBACH,OAAO,EAAE;4BACP,UAAU,EAAV,UAAW,SAAiB;gCAC1B,OAAO,UAAU,CAAC,SAAS,CAAC,CAAC;4BAC/B,CAAC;4BACD,MAAM,EAAN,UAAO,WAAoB;gCACzB,OAAO,MAAM,CAAC,WAAW,CAAC,CAAC;4BAC7B,CAAC;4BAEK,WAAW,EAAjB,UAAkB,OAAiB;;;wCACjC,sBAAO,WAAW,CAAC,OAAO,CAAC,EAAC;;;6BAC7B;4BACD,UAAU,EAAV,UAAW,SAAiB;gCAC1B,OAAO,UAAU,CAAC,SAAS,CAAC,CAAC;4BAC/B,CAAC;4BACK,QAAQ;;;wCACZ,sBAAO,QAAQ,EAAE,EAAC;;;6BACnB;4BACK,SAAS;;;wCACb,sBAAO,SAAS,EAAE,EAAC;;;6BACpB;4BACK,WAAW;;;wCACf,sBAAO,QAAQ,EAAE,EAAC;;;6BACnB;yBACF;wBACD,MAAM,EAAE;4BACA,UAAU;;;wCACd,sBAAO,OAAO,EAAE,EAAC;;;6BAClB;4BACD,gBAAgB,EAAhB,UAAiB,QAAgB;gCAC/B,OAAO,OAAO,CAAC,QAAQ,CAAC,CAAC;4BAC3B,CAAC;yBACF;wBACD,MAAM,EAAE;4BACN,aAAa,EAAE;gCACP,UAAU,EAAhB,UAAiB,OAAuB;;;4CACtC,sBAAO,mBAAmB,CAAC,OAAO,CAAC,EAAC;;;iCACrC;gCACK,YAAY,EAAlB,UAAmB,SAAmB;;;4CACpC,sBAAO,kBAAkB,CAAC,SAAS,CAAC,EAAC;;;iCACtC;6BACF;4BACK,YAAY,EAAlB,UAAmB,0BAAkD;;;wCACnE,sBAAO,uBAAuB,CAAC,0BAA0B,CAAC,EAAC;;;6BAC5D;4BAEK,UAAU,EAAhB,UAAiB,GAAa;;;wCAC5B,sBAAO,WAAW,CAAC,GAAG,CAAC,EAAC;;;6BACzB;yBACF;wBACD,MAAM,EAAE;4BACA,KAAK,EAAX,UAAY,MAAc,EAAE,MAAe;;;wCACzC,sBAAO,oBAAoB,CAAC,MAAM,EAAE,MAAM,CAAC,EAAC;;;6BAC7C;4BACK,SAAS,EAAf,UAAgB,MAAc,EAAE,MAAe;;;wCAC7C,sBAAO,eAAe,CAAC,MAAM,EAAE,MAAM,CAAC,EAAC;;;6BACxC;4BACK,YAAY,EAAlB,UAAmB,MAAc;;;wCAC/B,sBAAO,iBAAiB,CAAC,MAAM,CAAC,EAAC;;;6BAClC;yBACF;wBACD,OAAO,EAAE;4BACP,YAAY,EAAE;gCACN,SAAS,EAAf,UAAgB,OAAe;;;4CAC7B,sBAAO,WAAW,CAAC,OAAO,CAAC,EAAC;;;iCAC7B;6BACF;4BACK,UAAU,EAAhB,UAAiB,QAAkB;;;wCACjC,sBAAO,YAAY,CAAC,QAAQ,CAAC,EAAC;;;6BAC/B;yBACF;qBACF;yBACD;;;KACH,CAAC","sourcesContent":["import {\n  Credentials,\n  IQuestradeApi,\n  OptionsFilters,\n  StrategyVariantRequest,\n} from '../../../typescript';\nimport { void0 } from '../../utils';\nimport {\n  _getAccounts,\n  _getActivities,\n  _getBalances,\n  _getExecutions,\n  _getOrders,\n  _getOrdersByIds,\n  _getPositions,\n  _getServerTime,\n  _myBalances,\n} from './AccountsCalls';\nimport {\n  _getCandles,\n  _getMarkets,\n  _getMarketsQuotesStrategies,\n  _getOptionsById,\n  _getQuotesByIds,\n  _getQuotesOptionsbyFilterAndIds,\n  _getQuotesOptionsByIds,\n  _getQuotesOptionsFilter,\n  _getSymbolsByIds,\n  _getSymbolSearchAll,\n  _getSymbolSearchAndCount,\n  _getSymbolSearchCount,\n} from './MarketsCalls';\n\nexport const _getQuestradeApi = async (\n  credentials: Credentials\n): Promise<IQuestradeApi> => {\n  // const [\n  //   getAccounts,\n  //   getActivities,\n  //   getBalances,\n  //   getCandles,\n  //   getExecutions,\n  //   getMarkets,\n  //   getMarketsQuotesStrategies,\n  //   getOptionsById,\n  //   getOrders,\n  //   getOrdersByIds,\n  //   getPositions,\n  //   getQuotesByIds,\n  //   getQuotesOptionsbyFilterAndIds,\n  //   getQuotesOptionsByIds,\n  //   getQuotesOptionsFilter,\n  //   getServerTime,\n  //   getSymbolsByIds,\n  //   getSymbolSearchAll,\n  //   getSymbolSearchAndCount,\n  //   getSymbolSearchCount,\n  // ] = [\n  //   _getAccounts,\n  //   _getActivities,\n  //   _getBalances,\n  //   _getCandles,\n  //   _getExecutions,\n  //   _getMarkets,\n  //   _getMarketsQuotesStrategies,\n  //   _getOptionsById,\n  //   _getOrders,\n  //   _getOrdersByIds,\n  //   _getPositions,\n  //   _getQuotesByIds,\n  //   _getQuotesOptionsbyFilterAndIds,\n  //   _getQuotesOptionsByIds,\n  //   _getQuotesOptionsFilter,\n  //   _getServerTime,\n  //   _getSymbolsByIds,\n  //   _getSymbolSearchAll,\n  //   _getSymbolSearchAndCount,\n  //   _getSymbolSearchCount,\n  // ];\n\n  const [\n    accounts,\n    activities,\n    balances,\n    candles,\n    executions,\n    markets,\n    marketsQuotesStrategies,\n    optionsById,\n    orders,\n    ordersByIds,\n    positions,\n    quotesByIds,\n    quotesOptionsbyFilterAndIds,\n    quotesOptionsByIds,\n    quotesOptionsFilter,\n    serverTime,\n    symbolsByIds,\n    symbolSearchAll,\n    symbolSearchAndCount,\n    symbolSearchCount,\n  ] = [\n    _getAccounts(credentials),\n    _getActivities(credentials),\n    _getBalances(credentials),\n    _getCandles(credentials),\n    _getExecutions(credentials),\n    _getMarkets(credentials),\n    _getMarketsQuotesStrategies(credentials),\n    _getOptionsById(credentials),\n    _getOrders(credentials),\n    _getOrdersByIds(credentials),\n    _getPositions(credentials),\n    _getQuotesByIds(credentials),\n    _getQuotesOptionsbyFilterAndIds(credentials),\n    _getQuotesOptionsByIds(credentials),\n    _getQuotesOptionsFilter(credentials),\n    _getServerTime(credentials),\n    _getSymbolsByIds(credentials),\n    _getSymbolSearchAll(credentials),\n    _getSymbolSearchAndCount(credentials),\n    _getSymbolSearchCount(credentials),\n  ];\n  // unused for the moment\n  void0(quotesOptionsbyFilterAndIds);\n\n  return {\n    async myBalances() {\n      return _myBalances(await balances());\n    },\n    currentAccount: credentials.accountNumber,\n    serverTime: await serverTime(),\n    get: {\n      account: {\n        activities(startTime: string) {\n          return activities(startTime);\n        },\n        orders(stateFilter?: string) {\n          return orders(stateFilter);\n        },\n\n        async ordersByIds(orderId: number[]) {\n          return ordersByIds(orderId);\n        },\n        executions(startTime: string) {\n          return executions(startTime);\n        },\n        async balances() {\n          return balances();\n        },\n        async positions() {\n          return positions();\n        },\n        async allAccounts() {\n          return accounts();\n        },\n      },\n      market: {\n        async allMarkets() {\n          return markets();\n        },\n        candlesByStockId(symbolID: number) {\n          return candles(symbolID);\n        },\n      },\n      quotes: {\n        optionsQuotes: {\n          async fromFilter(filters: OptionsFilters) {\n            return quotesOptionsFilter(filters);\n          },\n          async byOptionsIds(optionIds: number[]) {\n            return quotesOptionsByIds(optionIds);\n          },\n        },\n        async byStrategies(strategyVariantRequestData: StrategyVariantRequest) {\n          return marketsQuotesStrategies(strategyVariantRequestData);\n        },\n\n        async byStockIds(ids: number[]) {\n          return quotesByIds(ids);\n        },\n      },\n      search: {\n        async stock(prefix: string, offset?: number) {\n          return symbolSearchAndCount(prefix, offset);\n        },\n        async allStocks(prefix: string, offset?: number) {\n          return symbolSearchAll(prefix, offset);\n        },\n        async countResults(prefix: string) {\n          return symbolSearchCount(prefix);\n        },\n      },\n      symbols: {\n        optionChains: {\n          async byStockId(stockId: number) {\n            return optionsById(stockId);\n          },\n        },\n        async byStockIds(stockIds: number[]) {\n          return symbolsByIds(stockIds);\n        },\n      },\n    },\n  };\n};\n"]}