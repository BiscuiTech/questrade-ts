{"version":3,"file":"_getQuestradeApi.js","sourceRoot":"","sources":["../../../../../src/api/private/QuestradeApi/_getQuestradeApi.ts"],"names":[],"mappings":"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","sourcesContent":["import { AxiosStatic, default as axios } from 'axios';\nimport {\n  Credentials,\n  IQuestradeApi,\n  OptionsFilters,\n  StrategyVariantRequest,\n} from '../../typescript';\nimport { void0 } from '../../utils';\nimport {\n  _getAccounts,\n  _getActivities,\n  _getBalances,\n  _getExecutions,\n  _getOrders,\n  _getOrdersByIds,\n  _getPositions,\n  _getServerTime,\n  _myBalances,\n} from './AccountsCalls';\nimport {\n  _getCandles,\n  _getMarkets,\n  _getMarketsQuotesStrategies,\n  _getOptionsById,\n  _getQuotesByIds,\n  _getQuotesOptionsbyFilterAndIds,\n  _getQuotesOptionsByIds,\n  _getQuotesOptionsFilter,\n  _getSymbolsByIds,\n  _getSymbolSearchAll,\n  _getSymbolSearchAndCount,\n  _getSymbolSearchCount,\n} from './MarketsCalls';\n\nexport const _getQuestradeApi = (_axios: AxiosStatic = axios) => async (\n  credentials: Credentials\n): Promise<IQuestradeApi> => {\n  const [\n    getAccounts,\n    getActivities,\n    getBalances,\n    getCandles,\n    getExecutions,\n    getMarkets,\n    getMarketsQuotesStrategies,\n    getOptionsById,\n    getOrders,\n    getOrdersByIds,\n    getPositions,\n    getQuotesByIds,\n    getQuotesOptionsbyFilterAndIds,\n    getQuotesOptionsByIds,\n    getQuotesOptionsFilter,\n    getServerTime,\n    getSymbolsByIds,\n    getSymbolSearchAll,\n    getSymbolSearchAndCount,\n    getSymbolSearchCount,\n  ] = [\n    _getAccounts(_axios),\n    _getActivities(_axios),\n    _getBalances(_axios),\n    _getCandles(_axios),\n    _getExecutions(_axios),\n    _getMarkets(_axios),\n    _getMarketsQuotesStrategies(_axios),\n    _getOptionsById(_axios),\n    _getOrders(_axios),\n    _getOrdersByIds(_axios),\n    _getPositions(_axios),\n    _getQuotesByIds(_axios),\n    _getQuotesOptionsbyFilterAndIds(_axios),\n    _getQuotesOptionsByIds(_axios),\n    _getQuotesOptionsFilter(_axios),\n    _getServerTime(_axios),\n    _getSymbolsByIds(_axios),\n    _getSymbolSearchAll(_axios),\n    _getSymbolSearchAndCount(_axios),\n    _getSymbolSearchCount(_axios),\n  ];\n\n  const [\n    accounts,\n    activities,\n    balances,\n    candles,\n    executions,\n    markets,\n    marketsQuotesStrategies,\n    optionsById,\n    orders,\n    ordersByIds,\n    positions,\n    quotesByIds,\n    quotesOptionsbyFilterAndIds,\n    quotesOptionsByIds,\n    quotesOptionsFilter,\n    serverTime,\n    symbolsByIds,\n    symbolSearchAll,\n    symbolSearchAndCount,\n    symbolSearchCount,\n  ] = [\n    getAccounts(credentials),\n    getActivities(credentials),\n    getBalances(credentials),\n    getCandles(credentials),\n    getExecutions(credentials),\n    getMarkets(credentials),\n    getMarketsQuotesStrategies(credentials),\n    getOptionsById(credentials),\n    getOrders(credentials),\n    getOrdersByIds(credentials),\n    getPositions(credentials),\n    getQuotesByIds(credentials),\n    getQuotesOptionsbyFilterAndIds(credentials),\n    getQuotesOptionsByIds(credentials),\n    getQuotesOptionsFilter(credentials),\n    getServerTime(credentials),\n    getSymbolsByIds(credentials),\n    getSymbolSearchAll(credentials),\n    getSymbolSearchAndCount(credentials),\n    getSymbolSearchCount(credentials),\n  ];\n  // unused for the moment\n  void0(quotesOptionsbyFilterAndIds);\n\n  return {\n    myBalances: _myBalances(await balances()),\n    currentAccount: credentials.accountNumber,\n    serverTime: await serverTime(),\n    get: {\n      account: {\n        activities(startTime: string) {\n          return activities(startTime);\n        },\n        orders(stateFilter?: string) {\n          return orders(stateFilter);\n        },\n        allOrders(startTime: string) {\n          return orders('All')(startTime);\n        },\n        async ordersByIds(orderId: number[]) {\n          return ordersByIds(orderId);\n        },\n        executions(startTime: string) {\n          return executions(startTime);\n        },\n        async balances() {\n          return balances();\n        },\n        async positions() {\n          return positions();\n        },\n        async allAccounts() {\n          return accounts();\n        },\n      },\n      market: {\n        async allMarkets() {\n          return markets();\n        },\n        candlesByStockId(startDate: string) {\n          return candles(startDate);\n        },\n      },\n      quotes: {\n        optionsQuotes: {\n          async fromFilter(filters: OptionsFilters) {\n            return quotesOptionsFilter(filters);\n          },\n          async byOptionsIds(optionIds: number[]) {\n            return quotesOptionsByIds(optionIds);\n          },\n        },\n        async byStrategies(strategyVariantRequestData: StrategyVariantRequest) {\n          return marketsQuotesStrategies(strategyVariantRequestData);\n        },\n\n        async byStockIds(ids: number[]) {\n          return quotesByIds(ids);\n        },\n      },\n      search: {\n        async stock(prefix: string, offset?: number) {\n          return symbolSearchAndCount(prefix, offset);\n        },\n        async allStocks(prefix: string, offset?: number) {\n          return symbolSearchAll(prefix, offset);\n        },\n        async countResults(prefix: string) {\n          return symbolSearchCount(prefix);\n        },\n      },\n      symbols: {\n        optionChains: {\n          async byStockId(stockId: number) {\n            return optionsById(stockId);\n          },\n        },\n        async byStockIds(stockIds: number[]) {\n          return symbolsByIds(stockIds);\n        },\n      },\n    },\n  };\n};\n"]}