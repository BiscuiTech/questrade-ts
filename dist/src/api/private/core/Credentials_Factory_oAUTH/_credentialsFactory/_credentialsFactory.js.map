{"version":3,"file":"_credentialsFactory.js","sourceRoot":"","sources":["../../../../../../../src/api/private/core/Credentials_Factory_oAUTH/_credentialsFactory/_credentialsFactory.ts"],"names":[],"mappings":";;;AAAA,2EAGmD;AACnD,sEAAoE;AACpE,uEAAsE;AAEtE,iEAAiE;AACpD,QAAA,mBAAmB,GAAG,UAAO,KAAa;;;;;gBACrD,IAAI,CAAC,KAAK;oBAAE,MAAM,IAAI,KAAK,CAAC,eAAe,CAAC,CAAC;gBACvC,IAAI,GAAG,KAAK,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC;gBAE3B,qBAAM,gDAAsB,CAAC,KAAK,CAAC,EAAA;;gBAAjD,WAAW,GAAG,SAAmC;;;;gBAGpC,qBAAM,4BAAY,CAAC,WAAW,CAAC,EAAE,EAAA;;gBAA5C,QAAQ,GAAG,SAAiC;gBACrC,qBAAM,8BAAc,CAAC,WAAW,CAAC,EAAE,EAAA;;gBAA1C,IAAI,GAAG,SAAmC;gBAE1C,aAAa,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC,iBAAiB,EAAE,CAAC;gBACnD,OAAO,GAAG,CAAC,CAAC,GAAG,EAAE,GAAG,IAAI,GAAG,aAAa,CAAC;gBACzC,UAAU,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC,OAAO,EAAE,CAAC;gBACtC,QAAQ,GAAG,UAAU,GAAG,WAAW,CAAC,SAAS,GAAG,IAAI,CAAC;gBAE3D,WAAW,CAAC,SAAS,GAAG,IAAI,IAAI,CAAC,QAAQ,CAAC,CAAC,kBAAkB,EAAE,CAAC;gBAChE,WAAW,CAAC,eAAe,GAAG,IAAI,IAAI,CAAC,OAAO,GAAG,QAAQ,CAAC,CAAC;gBAC3D,WAAW,CAAC,YAAY,GAAG,QAAQ,CAAC;gBACpC,WAAW,CAAC,UAAU,GAAG,IAAI,IAAI,CAAC,OAAO,GAAG,UAAU,CAAC,CAAC;gBACxD,WAAW,CAAC,aAAa,GAAG,UAAU,CAAC;gBAEvC,WAAW,CAAC,aAAa,GAAG,mDAAwB,CAAC,QAAQ,CAAC,CAAC;gBAE/D,IAAI,WAAW,CAAC,aAAa,KAAK,UAAU,IAAI,IAAI,EAAE;oBACpD,OAAO,CAAC,IAAI,CACV,+BAA+B,EAC/B,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE,EAExB,6BAA6B,CAC9B,CAAC;iBACH;qBAAM;oBACL,IAAI,WAAW,CAAC,aAAa,KAAK,UAAU,EAAE;wBAC5C,MAAM,KAAK,CAAC,kCAAkC,CAAC,CAAC;qBACjD;oBACD,OAAO,CAAC,IAAI,CAAC,wBAAwB,EAAE,IAAI,EAAE,mBAAmB,CAAC,CAAC;iBACnE;;;;gBAED,OAAO,CAAC,GAAG,CAAC,OAAK,CAAC,OAAO,CAAC,CAAC;gBAC3B,OAAO,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;gBAC1B,MAAM,IAAI,KAAK,CAAC,kCAAkC,CAAC,CAAC;oBAEtD,sBAAO,WAAW,EAAC;;;KACpB,CAAC","sourcesContent":["import {\n  _getAccounts,\n  _getServerTime,\n} from '../../../QuestradeApi_QtApi/AccountsCalls';\nimport { _oAuthAxiosCredentials } from '../_axiosCredentials_oAUTH';\nimport { _getPrimaryAccountNumber } from './_getPrimaryAccountNumber';\n\n/** Provide: a token string THEN GET: a 'Promise<Credentials>' */\nexport const _credentialsFactory = async (token: string) => {\n  if (!token) throw new Error('Missing Token');\n  const mock = token.length === 8 ? true : false;\n\n  const credentials = await _oAuthAxiosCredentials(token);\n\n  try {\n    const accounts = await _getAccounts(credentials)();\n    const time = await _getServerTime(credentials)();\n\n    const timZoneOffset = new Date(time).getTimezoneOffset();\n    const timZone = -1 * 60 * 1000 * timZoneOffset;\n    const serverTime = new Date(time).getTime();\n    const expireAt = serverTime + credentials.expiresIn * 1000;\n\n    credentials.expiresAt = new Date(expireAt).toLocaleTimeString();\n    credentials.tokenExpiration = new Date(timZone + expireAt);\n    credentials.expiresAtRaw = expireAt;\n    credentials.serverTime = new Date(timZone + serverTime);\n    credentials.serverTimeRaw = serverTime;\n\n    credentials.accountNumber = _getPrimaryAccountNumber(accounts);\n\n    if (credentials.accountNumber === '00000000' && mock) {\n      console.info(\n        '\\nüßê\\nü§° MOCK Server Time:   ',\n        new Date().toISOString(),\n\n        '\\nüç¶ Status: MOCKING!!!\\nü§®'\n      );\n    } else {\n      if (credentials.accountNumber === '00000000') {\n        throw Error(\"Account should not be '00000000'\");\n      }\n      console.info('Questrade Server Time:', time, '\\nStatus: ready\\n');\n    }\n  } catch (error) {\n    console.log(error.message);\n    console.info(credentials);\n    throw new Error('_oAuth Error getting credentials');\n  }\n  return credentials;\n};\n"]}