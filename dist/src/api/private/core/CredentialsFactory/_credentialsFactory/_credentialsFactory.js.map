{"version":3,"file":"_credentialsFactory.js","sourceRoot":"","sources":["../../../../../../../src/api/private/core/CredentialsFactory/_credentialsFactory/_credentialsFactory.ts"],"names":[],"mappings":";;;AAAA,0DAAsD;AACtD,uEAG6C;AAC7C,4DAAyD;AACzD,yEAAsE;AACtE,4DAA4D;AAC5D,6BAA6B;AAC7B,wEAAwE;AAExE,0DAA0D;AAC1D,6BAA6B;AAC7B,gFAAgF;AAEhF,wBAAwB;AACxB,iEAAiE;AACpD,QAAA,mBAAmB,GAAG,CAAC,SAAsB,eAAK,EAAE,EAAE,CAAC,KAAK,EACvE,KAAa,EACb,EAAE;IACF,IAAI,CAAC,KAAK;QAAE,MAAM,IAAI,KAAK,CAAC,eAAe,CAAC,CAAC;IAC7C,MAAM,IAAI,GAAG,KAAK,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC;IAE/C,MAAM,WAAW,GAAG,MAAM,qCAAiB,CAAC,MAAM,CAAC,CAAC,KAAK,CAAC,CAAC;IAE3D,IAAI;QACF,MAAM,QAAQ,GAAG,MAAM,4BAAY,CAAC,MAAM,CAAC,CAAC,WAAW,CAAC,EAAE,CAAC;QAC3D,MAAM,IAAI,GAAG,MAAM,8BAAc,CAAC,MAAM,CAAC,CAAC,WAAW,CAAC,EAAE,CAAC;QAEzD,MAAM,aAAa,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC,iBAAiB,EAAE,CAAC;QACzD,MAAM,OAAO,GAAG,CAAC,CAAC,GAAG,EAAE,GAAG,IAAI,GAAG,aAAa,CAAC;QAC/C,MAAM,UAAU,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC,OAAO,EAAE,CAAC;QAC5C,MAAM,QAAQ,GAAG,UAAU,GAAG,WAAW,CAAC,SAAS,GAAG,IAAI,CAAC;QAE3D,WAAW,CAAC,SAAS,GAAG,IAAI,IAAI,CAAC,QAAQ,CAAC,CAAC,kBAAkB,EAAE,CAAC;QAChE,WAAW,CAAC,eAAe,GAAG,IAAI,IAAI,CAAC,OAAO,GAAG,QAAQ,CAAC,CAAC;QAC3D,WAAW,CAAC,YAAY,GAAG,QAAQ,CAAC;QACpC,WAAW,CAAC,UAAU,GAAG,IAAI,IAAI,CAAC,OAAO,GAAG,UAAU,CAAC,CAAC;QACxD,WAAW,CAAC,aAAa,GAAG,UAAU,CAAC;QAEvC,WAAW,CAAC,aAAa,GAAG,mDAAwB,CAAC,QAAQ,CAAC,CAAC;QAE/D,IAAI,WAAW,CAAC,aAAa,KAAK,UAAU,IAAI,IAAI,EAAE;YACpD,OAAO,CAAC,IAAI,CACV,oBAAoB,EACpB,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE,EACxB,wCAAwC,CACzC,CAAC;SACH;aAAM;YACL,IAAI,WAAW,CAAC,aAAa,KAAK,UAAU,EAAE;gBAC5C,MAAM,KAAK,CAAC,kCAAkC,CAAC,CAAC;aACjD;YACD,OAAO,CAAC,IAAI,CAAC,wBAAwB,EAAE,IAAI,EAAE,mBAAmB,CAAC,CAAC;SACnE;KACF;IAAC,OAAO,KAAK,EAAE;QACd,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;QAC3B,OAAO,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QAC1B,MAAM,IAAI,KAAK,CAAC,kCAAkC,CAAC,CAAC;KACrD;IACD,OAAO,WAAW,CAAC;AACrB,CAAC,CAAC","sourcesContent":["import { AxiosStatic, default as axios } from 'axios';\nimport {\n  _getAccounts,\n  _getServerTime,\n} from '../../../QuestradeApi/AccountsCalls';\nimport { _oAuthCredentials } from '../_oAuthCredentials';\nimport { _getPrimaryAccountNumber } from './_getPrimaryAccountNumber';\n// const _getServerTime = (_axios: AxiosStatic = axios) => (\n//   credentials: Credentials\n// ) => async () => _axiosGetApi(_axios)(credentials)<ITime>('/time')();\n\n// const _getAccounts = (_axios: AxiosStatic = axios) => (\n//   credentials: Credentials\n// ) => async () => _axiosGetApi(_axios)(credentials)<IAccounts>('/accounts')();\n\n// # _credentialsFactory\n/** Provide: a token string THEN GET: a 'Promise<Credentials>' */\nexport const _credentialsFactory = (_axios: AxiosStatic = axios) => async (\n  token: string\n) => {\n  if (!token) throw new Error('Missing Token');\n  const mock = token.length === 8 ? true : false;\n\n  const credentials = await _oAuthCredentials(_axios)(token);\n\n  try {\n    const accounts = await _getAccounts(_axios)(credentials)();\n    const time = await _getServerTime(_axios)(credentials)();\n\n    const timZoneOffset = new Date(time).getTimezoneOffset();\n    const timZone = -1 * 60 * 1000 * timZoneOffset;\n    const serverTime = new Date(time).getTime();\n    const expireAt = serverTime + credentials.expiresIn * 1000;\n\n    credentials.expiresAt = new Date(expireAt).toLocaleTimeString();\n    credentials.tokenExpiration = new Date(timZone + expireAt);\n    credentials.expiresAtRaw = expireAt;\n    credentials.serverTime = new Date(timZone + serverTime);\n    credentials.serverTimeRaw = serverTime;\n\n    credentials.accountNumber = _getPrimaryAccountNumber(accounts);\n\n    if (credentials.accountNumber === '00000000' && mock) {\n      console.info(\n        'ü§° üßê  LOCAL Time:',\n        new Date().toISOString(),\n        '\\n üç¶ ü§®  Status: !!!!00000000!!!!  \\n'\n      );\n    } else {\n      if (credentials.accountNumber === '00000000') {\n        throw Error(\"Account should not be '00000000'\");\n      }\n      console.info('Questrade Server Time:', time, '\\nStatus: ready\\n');\n    }\n  } catch (error) {\n    console.log(error.message);\n    console.info(credentials);\n    throw new Error('_oAuth Error getting credentials');\n  }\n  return credentials;\n};\n"]}