{"version":3,"file":"_getDataFromApi.js","sourceRoot":"","sources":["../../../../src/api/core/_getDataFromApi.ts"],"names":[],"mappings":";;;AAAA,sBAAsD;AACtD,8CAA2D;AAC3D,iEAIiC;AAoBpB,QAAA,eAAe,GAAG,CAAC;IAC9B,IAAM,YAAY,GAAG,UAAC,WAAwB;QAC5C,OAAA,sBAAmB,CAAC,WAAW,CAAC,CAAY,WAAW,CAAC;IAAxD,CAAwD,CAAC;IAI3D,IAAM,WAAW,GAAG,UAAC,WAAwB,IAAK,OAAA,UAAC,SAAiB,IAAK,OAAA,UACvE,OAAe,IACZ,OAAA,UAAC,QAA2B;QAA3B,yBAAA,EAAA,mBAA2B;QAAK,OAAA,UACpC,QAAgB;;;4BAEf,WAAM,eAAY,CAAC,WAAW,CAAC,CAC9B,sBAAoB,QAAQ,mBAAc,SAAS,iBAAY,OAAO,kBAAa,QAAU,CAC9F,EAAE,EAAA;4BAFH,WAAA,CAAC,SAEE,CAAC,CAAC,OAAO,EAAA;;;aAAA;IALwB,CAKxB,EALT,CAKS,EAP2D,CAO3D,EAPoC,CAOpC,CAAC;IAIf,IAAM,cAAc,GAAG,UAAC,WAAwB,IAAK,OAAA,UACnD,SAAiB,IACd,OAAA,UAAO,OAAe;;;wBACxB,WAAM,sBAAmB,CAAC,WAAW,CAAC,CACrC,iBAAe,iCAAsB,CAAC,SAAS,EAAE,OAAO,CAAG,CAC5D,EAAE,EAAA;wBAFH,WAAA,CAAC,SAEE,CAAC,CAAC,UAAU,EAAA;;;SAAA,EAHZ,CAGY,EALoC,CAKpC,CAAC;IAIlB,IAAM,WAAW,GAAG,UAAC,WAAwB,IAAK,OAAA;;oBAC/C,WAAM,eAAY,CAAC,WAAW,CAAC,CAAW,UAAU,CAAC,EAAE,EAAA;oBAAxD,WAAA,CAAC,SAAuD,CAAC,CAAC,OAAO,EAAA;;aAAA,EADjB,CACiB,CAAC;IAIpE,IAAM,eAAe,GAAG,UAAC,WAAwB,IAAK,OAAA,UACpD,QAAgB;;;wBAEf,WAAM,eAAY,CAAC,WAAW,CAAC,CAC9B,cAAY,QAAQ,aAAU,CAC/B,EAAE,EAAA;wBAFH,WAAA,CAAC,SAEE,CAAC,CAAC,WAAW,EAAA;;;SAAA,EALoC,CAKpC,CAAC;IAInB,IAAM,UAAU,GAAG,UAAC,WAAwB,IAAK,OAAA,UAAC,SAAiB,IAAK,OAAA,UACtE,OAAe,IACZ,OAAA,UAAO,WAA2B;QAA3B,4BAAA,EAAA,mBAA2B;;;;4BACpC,WAAM,sBAAmB,CAAC,WAAW,CAAC,CACrC,aAAW,iCAAsB,CAC/B,SAAS,EACT,OAAO,CACR,oBAAe,WAAa,CAC9B,EAAE,EAAA;4BALH,WAAA,CAAC,SAKE,CAAC,CAAC,MAAM,EAAA;;;;KAAA,EANR,CAMQ,EAR2D,CAQ3D,EARoC,CAQpC,CAAC;IAId,IAAM,eAAe,GAAG,UAAC,WAAwB,IAAK,OAAA,UACpD,OAAiB;;;wBAEhB,WAAM,sBAAmB,CAAC,WAAW,CAAC,CACrC,iBAAe,OAAO,CAAC,IAAI,CAAC,GAAG,CAAG,CACnC,EAAE,EAAA;wBAFH,WAAA,CAAC,SAEE,CAAC,CAAC,MAAM,EAAA;;;SAAA,EALyC,CAKzC,CAAC;IAId,IAAM,aAAa,GAAG,UAAC,WAAwB,IAAK,OAAA;;;wBACjD,WAAM,sBAAmB,CAAC,WAAW,CAAC,CAAa,YAAY,CAAC,EAAE,EAAA;wBAAnE,WAAA,CAAC,SAAkE,CAAC;yBACjE,SAAS,EAAA;;;SAAA,EAFsC,CAEtC,CAAC;IAIf,IAAM,eAAe,GAAG,UAAC,WAAwB,IAAK,OAAA,UAAO,GAAa;;;wBACvE,WAAM,eAAY,CAAC,WAAW,CAAC,CAC9B,yBAAuB,GAAG,CAAC,IAAI,CAAC,GAAG,CAAG,CACvC,EAAE,EAAA;wBAFH,WAAA,CAAC,SAEE,CAAC,CAAC,MAAM,EAAA;;;SAAA,EAHyC,CAGzC,CAAC;IAId,IAAM,gBAAgB,GAAG,UAAC,WAAwB,IAAK,OAAA,UACrD,QAAkB;QACf,WAAA,eAAY,CAAC,WAAW,CAAC,CAAW,kBAAgB,QAAQ,CAAC,IAAI,EAAI,CAAC,EAAE,EAAA;aAAA,EAFtB,CAEsB,CAAC;IAI9E,IAAM,gBAAgB,GAAG,UAAC,WAAwB,IAAK,OAAA,UACrD,MAAc,EACd,MAAkB;QAAlB,uBAAA,EAAA,UAAkB;;;;;4BAGE,WAAM,eAAY,CAAC,WAAW,CAAC,CACjD,4BAA0B,MAAQ,CACnC,EAAE,EAAA;;wBAFK,OAAO,GAAK,CAAA,SAEjB,CAAA,QAFY;wBAGT,KAAK,GAAG,OAAO,CAAC,MAAM,CAAC;wBACvB,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC;wBAC/B,MAAM,CAAC,KAAK,GAAG,KAAK,CAAC;wBACrB,WAAO,MAAM,EAAC;;;;KACf,EAZsD,CAYtD,CAAC;IAGF,IAAM,mBAAmB,GAAG,UAAC,WAAwB,IAAK,OAAA,UACxD,MAAc,EACd,MAAkB;QAAlB,uBAAA,EAAA,UAAkB;;;;4BAEV,WAAM,eAAY,CAAC,WAAW,CAAC,CACrC,4BAA0B,MAAM,gBAAW,MAAQ,CACpD,EAAE,EAAA;4BAFH,WAAO,CAAC,SAEL,CAAC,CAAC,OAAO,EAAC;;;;KACd,EAPyD,CAOzD,CAAC;IAGF,IAAM,qBAAqB,GAAG,UAAC,WAAwB,IAAK,OAAA,UAC1D,MAAc;;;wBAEN,WAAM,eAAY,CAAC,WAAW,CAAC,CACrC,4BAA0B,MAAQ,CACnC,EAAE,EAAA;wBAFH,WAAO,CAAC,SAEL,CAAC,CAAC,OAAO,CAAC,MAAM,EAAC;;;SACrB,EAN2D,CAM3D,CAAC;IAGF,IAAM,cAAc,GAAG,UAAC,WAAwB,IAAK,OAAA;;;qBAC/C,IAAI;gBAAE,WAAM,eAAY,CAAC,WAAW,CAAC,CAAO,OAAO,CAAC,EAAE,EAAA;oBAA1D,WAAA,cAAI,IAAI,WAAC,CAAC,SAAgD,CAAC,CAAC,IAAI,KAAC,EAAA;;aAAA,EADd,CACc,CAAC;IAQpE,IAAM,wBAAwB,GAAG,UAAC,WAAwB;QACxD,OAAA,sBAAmB,CAAC,WAAW,CAAC,CAAM,cAAc,CAAC;IAArD,CAAqD,CAAC;IAIxD,IAAM,YAAY,GAAG,UAAC,WAAwB,IAAK,OAAA;;oBAChD,WAAM,eAAY,CAAC,WAAW,CAAC,CAAY,WAAW,CAAC,EAAE,EAAA;oBAA1D,WAAA,CAAC,SAAyD,CAAC,CAAC,QAAQ,EAAA;;aAAA,EADnB,CACmB,CAAC;IAIvE,IAAM,cAAc,GAAG,UAAC,WAAwB,IAAK,OAAA,UACnD,SAAiB,IACd,OAAA,UAAO,OAAe;;;;;oBACnB,QAAQ,GAAG,iCAAsB,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;oBACtD,QAAQ,GAAG,iBAAe,QAAU,CAAC;oBAEnC,WAAM,sBAAmB,CAAC,WAAW,CAAC,CAAc,QAAQ,CAAC,EAAE,EAAA;wBAAvE,WAAO,CAAC,SAA+D,CAAC;yBACrE,UAAU,EAAC;;;SACf,EANI,CAMJ,EARoD,CAQpD,CAAC;IAEF,OAAO,UAAC,WAAwB;QAC9B,IAAM,YAAY,GAAQ,gBAAgB,CAAC,WAAW,CAAC,CAAC;QACxD,YAAY,CAAC,KAAK,GAAG,qBAAqB,CAAC,WAAW,CAAC,CAAC;QAExD,IAAM,mBAAmB,GAAQ,+CAAuB,CAAC,WAAW,CAAC,CAAC;QACtE,mBAAmB,CAAC,KAAK,GAAG,8CAAsB,CAAC,WAAW,CAAC,CAAC;QAEhE,IAAM,UAAU,GAAG,WAAW,CAAC,aAAa,CAAC;QAC7C,IAAM,WAAW,GAAG,YAAY,CAAC,WAAW,CAAC,CAAC;QAC9C,IAAM,UAAU,GAAG,cAAc,CAAC,WAAW,CAAC,CAAC;QAC/C,IAAM,QAAQ,GAAG,YAAY,CAAC,WAAW,CAAC,CAAC;QAC3C,IAAM,iBAAiB,GAAG,WAAW,CAAC,WAAW,CAAC,CAAC;QACnD,IAAM,UAAU,GAAG,cAAc,CAAC,WAAW,CAAC,CAAC;QAC/C,IAAM,OAAO,GAAG,WAAW,CAAC,WAAW,CAAC,CAAC;QACzC,IAAM,WAAW,GAAG,eAAe,CAAC,WAAW,CAAC,CAAC;QACjD,IAAM,WAAW,GAAG,eAAe,CAAC,WAAW,CAAC,CAAC;QACjD,IAAM,MAAM,GAAG,UAAU,CAAC,WAAW,CAAC,CAAC;QACvC,IAAM,SAAS,GAAG,UAAU,CAAC,WAAW,CAAC,CAAC,KAAK,CAAC,CAAC;QACjD,IAAM,SAAS,GAAG,aAAa,CAAC,WAAW,CAAC,CAAC;QAC7C,IAAM,kBAAkB,GAAG,eAAe,CAAC,WAAW,CAAC,CAAC;QACxD,IAAM,2BAA2B,GAAG,mBAAkD,CAAC;QAGvF,IAAM,aAAa,GAAG,cAAc,CAAC,WAAW,CAAC,CAAC;QAClD,IAAM,YAAY,GAAG,gBAAgB,CAAC,WAAW,CAAC,CAAC;QACnD,IAAM,MAAM,GAAG,YAAoC,CAAC;QACpD,IAAM,SAAS,GAAG,mBAAmB,CAAC,WAAW,CAAC,CAAC;QACnD,IAAM,WAAW,GAAG,qBAAqB,CAAC,WAAW,CAAC,CAAC;QACvD,IAAM,YAAY,GAAG,wBAAwB,CAAC,WAAW,CAAC,CAAC;QAE3D,OAAO;YACL,UAAU,YAAA;YACV,aAAa,eAAA;YACb,GAAG,EAAE;gBACH,QAAQ,EAAE;oBACR,UAAU,YAAA;oBACV,MAAM,QAAA;oBACN,SAAS,WAAA;oBACT,WAAW,aAAA;oBACX,UAAU,YAAA;oBACV,QAAQ,UAAA;oBACR,SAAS,WAAA;oBACT,WAAW,EAAE,WAAW;oBACxB,IAAI,EAAE,aAAa;iBACpB;gBACD,OAAO,EAAE;oBACP,WAAW,EAAE,iBAAiB;oBAC9B,MAAM,EAAE;wBACN,YAAY,cAAA;wBACZ,OAAO,EAAE,2BAA2B;wBACpC,KAAK,EAAE,kBAAkB;qBAC1B;oBACD,UAAU,EAAE,OAAO;iBACpB;gBACD,OAAO,EAAE;oBACP,WAAW,aAAA;oBACX,KAAK,EAAE,YAAY;oBACnB,MAAM,QAAA;oBACN,SAAS,WAAA;oBACT,WAAW,aAAA;iBACZ;aACF;SACF,CAAC;IACJ,CAAC,CAAC;AACJ,CAAC,CAAC,EAAE,CAAC","sourcesContent":["import { _axiosAccountGetApi, _axiosGetApi } from '.';\nimport { endpointFormatDateTool } from '../utils/timeutil';\nimport {\n  _Filters,\n  _getQuotesOptionsByIds,\n  _getQuotesOptionsFilter,\n} from './_marketsQuotesOptions';\nimport {\n  Credentials,\n  IAccounts,\n  IActivities,\n  IBalances,\n  ICandle,\n  ICandles,\n  IExecutions,\n  IMarkets,\n  IOptionChains,\n  IOptionsQuotes,\n  IOrders,\n  IPositions,\n  IQuotes,\n  ISymbol,\n  ISymbols,\n  Time,\n} from './typescript';\n\nexport const _getDataFromApi = (() => {\n  const _getBalances = (credentials: Credentials) =>\n    _axiosAccountGetApi(credentials)<IBalances>('/balances');\n\n  // + _getCandles\n  /** _getCandles */\n  const _getCandles = (credentials: Credentials) => (startDate: string) => (\n    endDate: string\n  ) => (interval: string = 'OneDay') => async (\n    symbolID: number\n  ): Promise<ICandle[]> =>\n    (await _axiosGetApi(credentials)<ICandles>(\n      `/markets/candles/${symbolID}?startTime=${startDate}&endTime=${endDate}&interval=${interval}`\n    )()).candles;\n\n  // + _getExecutions\n  /** _getExecutions */\n  const _getExecutions = (credentials: Credentials) => (\n    startDate: string\n  ) => async (endDate: string) =>\n    (await _axiosAccountGetApi(credentials)<IExecutions>(\n      `/executions?${endpointFormatDateTool(startDate, endDate)}`\n    )()).executions;\n\n  // + _getMarkets\n  /** _getMarkets */\n  const _getMarkets = (credentials: Credentials) => async () =>\n    (await _axiosGetApi(credentials)<IMarkets>('/markets')()).markets;\n\n  // + _getOptionsSymbols\n  /** _getOptionsSymbols */\n  const _getOptionsById = (credentials: Credentials) => async (\n    symbolID: number\n  ) =>\n    (await _axiosGetApi(credentials)<IOptionChains>(\n      `/symbols/${symbolID}/options`\n    )()).optionChain;\n\n  // + _getOrders\n  /** _getOrders */\n  const _getOrders = (credentials: Credentials) => (startDate: string) => (\n    endDate: string\n  ) => async (stateFilter: string = 'All') =>\n    (await _axiosAccountGetApi(credentials)<IOrders>(\n      `/orders?${endpointFormatDateTool(\n        startDate,\n        endDate\n      )}stateFilter=${stateFilter}`\n    )()).orders;\n\n  // + _getOrderByIds\n  /** _getOrders */\n  const _getOrdersByIds = (credentials: Credentials) => async (\n    orderId: number[]\n  ) =>\n    (await _axiosAccountGetApi(credentials)<IOrders>(\n      `/orders?ids=${orderId.join(',')}`\n    )()).orders;\n\n  // + _getPositions\n  /** _getPositions */\n  const _getPositions = (credentials: Credentials) => async () =>\n    (await _axiosAccountGetApi(credentials)<IPositions>('/positions')())\n      .positions;\n\n  // + _getQuotesByID\n  /** _getQuotesFromSymbolID */\n  const _getQuotesByIds = (credentials: Credentials) => async (ids: number[]) =>\n    (await _axiosGetApi(credentials)<IQuotes>(\n      `/markets/quotes?ids=${ids.join(',')}`\n    )()).quotes;\n\n  // + _getSymbolsByIDs\n  /** _getSymbolFromSymbolID */\n  const _getSymbolsByIds = (credentials: Credentials) => async (\n    symbolId: number[]\n  ) => _axiosGetApi(credentials)<ISymbols>(`/symbols?ids=${symbolId.join()}`)();\n\n  // + _getSymbolSearch\n  /** _getSymbolSearch */\n  const _getSymbolSearch = (credentials: Credentials) => async (\n    prefix: string,\n    offset: number = 0\n  ) => {\n    /* return */\n    const { symbols } = await _axiosGetApi(credentials)<ISymbols>(\n      `/symbols/search?prefix=${prefix}`\n    )(); // .symbols[offset];\n    const count = symbols.length;\n    const result = symbols[offset];\n    result.count = count;\n    return result;\n  };\n  // + _getSymbolSearchAll\n  /** _getSymbolSearch */\n  const _getSymbolSearchAll = (credentials: Credentials) => async (\n    prefix: string,\n    offset: number = 0\n  ) => {\n    return (await _axiosGetApi(credentials)<ISymbols>(\n      `/symbols/search?prefix=${prefix}&offset=${offset}`\n    )()).symbols;\n  };\n  // + _getSymbolSearchCount\n  /** _getSymbolSearch */\n  const _getSymbolSearchCount = (credentials: Credentials) => async (\n    prefix: string\n  ) => {\n    return (await _axiosGetApi(credentials)<ISymbols>(\n      `/symbols/search?prefix=${prefix}`\n    )()).symbols.length;\n  };\n  // + _getServerTime\n  /** _getTime */\n  const _getServerTime = (credentials: Credentials) => async () =>\n    new Date((await _axiosGetApi(credentials)<Time>('/time')()).time);\n\n  // + _quotesOptionsFromIds\n\n  // + _quotesOptionsFromFilter\n\n  // & _postGetStrategiesQuotes\n  /** _postGetStrategiesQuotes */\n  const _postGetStrategiesQuotes = (credentials: Credentials) =>\n    _axiosAccountGetApi(credentials)<any>('_getAccounts');\n\n  // + _getAccounts\n  /** _getAccounts */\n  const _getAccounts = (credentials: Credentials) => async () =>\n    (await _axiosGetApi(credentials)<IAccounts>('/accounts')()).accounts;\n\n  // + _getActivities\n  /** PROVIDE: credentials, startTime string and endTime string THEN GET: a 'Promise<IAccountActivity[]>' */\n  const _getActivities = (credentials: Credentials) => (\n    startTime: string\n  ) => async (endTime: string) => {\n    const dateTime = endpointFormatDateTool(startTime, endTime);\n    const endpoint = `/activities?${dateTime}`;\n\n    return (await _axiosAccountGetApi(credentials)<IActivities>(endpoint)())\n      .activities;\n  };\n\n  return (credentials: Credentials) => {\n    const symbolSearch: any = _getSymbolSearch(credentials);\n    symbolSearch.count = _getSymbolSearchCount(credentials);\n\n    const quotesOptionsFilter: any = _getQuotesOptionsFilter(credentials);\n    quotesOptionsFilter.byIds = _getQuotesOptionsByIds(credentials);\n\n    const setAccount = credentials.accountNumber;\n    const allAccounts = _getAccounts(credentials);\n    const activities = _getActivities(credentials);\n    const balances = _getBalances(credentials);\n    const marketCandlesById = _getCandles(credentials);\n    const executions = _getExecutions(credentials);\n    const markets = _getMarkets(credentials);\n    const optionsById = _getOptionsById(credentials);\n    const ordersByIds = _getOrdersByIds(credentials);\n    const orders = _getOrders(credentials);\n    const ordersAll = _getOrders(credentials)('All');\n    const positions = _getPositions(credentials);\n    const marketsQuotesByIds = _getQuotesByIds(credentials);\n    const quotesOptionsbyFilterAndIds = quotesOptionsFilter as QuotesOptionsbyFilterAndIds;\n    // const optionsQuotesByIds = _getQuotesOptionsByIds(credentials);\n    // const quotesOptionsFilter =\n    const getServerTime = _getServerTime(credentials);\n    const symbolsByIds = _getSymbolsByIds(credentials);\n    const search = symbolSearch as SymbolSearchAndCount;\n    const searchAll = _getSymbolSearchAll(credentials);\n    const searchCount = _getSymbolSearchCount(credentials);\n    const byStrategies = _postGetStrategiesQuotes(credentials);\n\n    return {\n      setAccount,\n      getServerTime,\n      get: {\n        accounts: {\n          activities,\n          orders,\n          ordersAll,\n          ordersByIds,\n          executions,\n          balances,\n          positions,\n          allAccounts: allAccounts,\n          time: getServerTime,\n        },\n        markets: {\n          candlesById: marketCandlesById,\n          quotes: {\n            byStrategies,\n            options: quotesOptionsbyFilterAndIds,\n            byIds: marketsQuotesByIds,\n          },\n          allMarkets: markets,\n        },\n        symbols: {\n          optionsById,\n          byIds: symbolsByIds,\n          search,\n          searchAll,\n          searchCount,\n        },\n      },\n    };\n  };\n})();\n\nexport interface ISymbolSearchCount {\n  count: (prefix: string) => Promise<number>;\n}\n\nexport type SymbolSearch = (\n  prefix: string,\n  offset?: number\n) => Promise<ISymbol>;\n\nexport type SymbolSearchAndCount = SymbolSearch & ISymbolSearchCount;\n\nexport interface IQuotesOptionsByIds {\n  byIds: (optionIds: number[]) => Promise<IOptionsQuotes>;\n}\n\nexport type QuotesOptions = (filters: _Filters) => Promise<IOptionsQuotes>;\n\nexport type QuotesOptionsbyFilterAndIds = IQuotesOptionsByIds & QuotesOptions;\n"]}