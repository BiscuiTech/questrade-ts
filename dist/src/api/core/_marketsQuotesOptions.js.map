{"version":3,"file":"_marketsQuotesOptions.js","sourceRoot":"","sources":["../../../../src/api/core/_marketsQuotesOptions.ts"],"names":[],"mappings":";;;AAAA,sBAAkC;AAGrB,QAAA,sBAAsB,GAAG,UAAC,WAAwB,IAAK,OAAA,UAClE,SAAmB;IAEnB,WAAA,gCAAwB,CAAC,WAAW,CAAC,CAAC,SAAS,EAAE,KAAK,CAAC,EAAE,KAAK,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE,CAAC,CAAC,EAAA;SAAA,EAHV,CAGU,CAAC;AAElE,QAAA,uBAAuB,GAAG,UAAC,WAAwB,IAAK,OAAA,UACnE,OAAiB;;;QAGf,YAAY,GAKV,OAAO,aALG,EACZ,UAAU,GAIR,OAAO,WAJC,EACV,UAAU,GAGR,OAAO,WAHC,EACV,cAAc,GAEZ,OAAO,eAFK,EACd,cAAc,GACZ,OAAO,eADK,CACJ;QACZ,WAAO,gCAAwB,CAAC,WAAW,CAAC,CAC1C,IAAI,EACJ,YAAY,EACZ,UAAU,EACV,UAAU,EACV,cAAc,EACd,cAAc,CACf,EAAC;;KACH,EAlBoE,CAkBpE,CAAC;AAEW,QAAA,wBAAwB,GAAG,UAAC,WAAwB,IAAK,OAAA,UACpE,SAAkD,EAClD,YAAqB,EACrB,UAAmB,EACnB,UAA8C,EAC9C,cAA6C,EAC7C,cAA6C;IAL7C,0BAAA,EAAA,cAAkD;IAGlD,2BAAA,EAAA,kBAA6C,CAAC;IAC9C,+BAAA,EAAA,kBAA6C;IAC7C,+BAAA,EAAA,kBAA6C;;;;YAE7C,IAAI;gBACI,QAAQ,GACZ,CAAC,CAAC,SAAS,IAAI,SAAS,CAAC,MAAM,GAAG,CAAC;oBACjC,CAAC,CAAC;wBACE,SAAS,WAAA;qBACV;oBACH,CAAC,CAAC;wBACE,OAAO,EAAE;4BACP;gCACE,YAAY,cAAA;gCACZ,UAAU,YAAA;gCACV,UAAU,EAAE,UAAU,IAAI,KAAK,CAAC;gCAChC,cAAc,EAAE,cAAc,IAAI,CAAC;gCACnC,cAAc,EAAE,cAAc,IAAI,CAAC;6BACpC;yBACF;qBACF,CAAC;gBAER,WAAO,gBAAa,CAAC,WAAW,CAAC,CAAkB,QAAQ,CAAC,CAE1D,yBAAyB,CAAC,EAAC;aAC9B;YAAC,OAAO,KAAK,EAAE;gBACd,OAAO,CAAC,KAAK,CAAC,yBAAyB,EAAE,KAAK,CAAC,OAAO,CAAC,CAAC;gBACxD,MAAM,KAAK,CAAC;aACb;;;;CACF,EAjCqE,CAiCrE,CAAC","sourcesContent":["import { _axiosApiPost } from '.';\nimport { Credentials, IOptionsQuotes } from './typescript';\n\nexport const _getQuotesOptionsByIds = (credentials: Credentials) => async (\n  optionIds: number[]\n) =>\n  _getMarketsQuotesOptions(credentials)(optionIds, void 0, void 0, null, 0, 0);\n\nexport const _getQuotesOptionsFilter = (credentials: Credentials) => async (\n  filters: _Filters\n) => {\n  const {\n    underlyingId,\n    expiryDate,\n    optionType,\n    minstrikePrice,\n    maxstrikePrice,\n  } = filters;\n  return _getMarketsQuotesOptions(credentials)(\n    null,\n    underlyingId,\n    expiryDate,\n    optionType,\n    minstrikePrice,\n    maxstrikePrice\n  );\n};\n\nexport const _getMarketsQuotesOptions = (credentials: Credentials) => async (\n  optionIds: void | null | undefined | number[] = [],\n  underlyingId?: number,\n  expiryDate?: string,\n  optionType: string | undefined | null = void 0,\n  minstrikePrice: number | undefined | null = 0,\n  maxstrikePrice: number | undefined | null = 0\n): Promise<IOptionsQuotes> => {\n  try {\n    const postData: OptionsIdArray | FiltersArray =\n      !!optionIds && optionIds.length > 0\n        ? {\n            optionIds,\n          }\n        : {\n            filters: [\n              {\n                underlyingId,\n                expiryDate,\n                optionType: optionType || void 0,\n                minstrikePrice: minstrikePrice || 0,\n                maxstrikePrice: maxstrikePrice || 0,\n              },\n            ],\n          };\n\n    return _axiosApiPost(credentials)<OptionsPostData>(postData)<\n      IOptionsQuotes\n    >('/markets/quotes/options');\n  } catch (error) {\n    console.error('/markets/quotes/options', error.message);\n    throw error;\n  }\n};\n\nexport type OptionsPostData = OptionsIdArray | FiltersArray;\nexport interface OptionsIdArray {\n  optionIds: number[];\n}\n\nexport interface FiltersArray {\n  filters: _Filters[];\n}\n\n// tslint:disable-next-line: class-name\nexport interface _Filters {\n  underlyingId?: number;\n  expiryDate?: string;\n  optionType?: string | undefined | null;\n  minstrikePrice?: number | undefined | null;\n  maxstrikePrice?: number | undefined | null;\n}\n"]}