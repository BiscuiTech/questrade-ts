{"version":3,"file":"_axiosApi.js","sourceRoot":"","sources":["../../../../src/api/core/_axiosApi.ts"],"names":[],"mappings":"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","sourcesContent":["import { AxiosRequestConfig, AxiosResponse, default as axios } from 'axios';\nimport { default as httpStatus } from 'http-status-codes';\nimport { Credentials } from './typescript';\n// % _axiosApi !!!\n/**\n * PROVIDE: credentials, VERB string, postData with D data type (or null)\n * and endpoint string with R return type, THEN GET: a Promise<R>\n */\nconst _axiosApi = (credentials: Credentials) => (VERB: string = 'GET') => <\n  D = any\n>(\n  postData: D | null = null\n) => async <R>(endpoint: string): Promise<R> => {\n  let data: R;\n  try {\n    let response: AxiosResponse<R>;\n\n    const config: AxiosRequestConfig = {\n      url: credentials.apiUrl + endpoint,\n      method: VERB.toLowerCase() as 'get' | 'post',\n      headers: {\n        Authorization: `Bearer ${credentials.accessToken}`,\n        location: credentials.accountNumber,\n      },\n      data: postData, // || '',\n    };\n\n    try {\n      response = await axios(config);\n      // console.log(response);\n    } catch (e) {\n      console.log(e.message);\n      throw new Error(e.message);\n    }\n\n    if (!response.data) {\n      console.error('response data null or undefined');\n      throw new Error();\n    }\n    data = response.data;\n  } catch (apiError) {\n    throw _apiGetErrorLogin(apiError);\n  }\n  return data;\n};\n\n// % _apiGetErrorLogin\n/** PROVIDE: apiError THEN GET: apiError back WILL: console.error the problems */\nconst _apiGetErrorLogin = (apiError: Error /* , data?: any */) => {\n  // try {\n  console.error(\n    '\\nAPI error in call to api:\\n',\n    `\\n${apiError.message}`\n    // `\\nError code: ${apiError.response.}`,\n    // `\\n${apiError.response.data.message}`\n  );\n  // } catch (dataError) {\n  console.error(\n    '\\nAPI error in the response from the api:',\n    `\\n${httpStatus\n      .getStatusText(\n        Number.parseInt((apiError.message as string).slice(-3), 10)\n      )\n      .toUpperCase()}`\n  );\n  // }\n  return apiError;\n};\n\n// # _axiosApiGet !!!\n/** PROVIDE: credentials and endpoint string with R return type, THEN GET: a Promise<R> */\nexport const _axiosGetApi = (credentials: Credentials) => <R>(\n  endpoint: string\n) => async () => _axiosApi(credentials)()()<R>(endpoint);\n\n// # _axiosAccountApi\n/** PROVIDE: credentials and accountEndpoint string with R return type, THEN GET: a Promise<R> */\nexport const _axiosAccountGetApi = (credentials: Credentials) => <R>(\n  accountEndpoint: string\n) => async () =>\n  _axiosGetApi(credentials)<R>(\n    endpointFormatAccount(credentials)(accountEndpoint)\n  )();\n\n// # _axiosApiPost !!!\n/** PROVIDE: credentials, postData with D data type and endpoint string with R return type, THEN GET: a Promise<R> */\nexport const _axiosApiPost = (credentials: Credentials) => <D = any>(\n  postData: D\n) => _axiosApi(credentials)('POST')<D>(postData);\n\n// % endpointFormatAccount\n/** PROVIDE: credentials and accountEndpoint string, THEN GET: a endpoint string */\nconst endpointFormatAccount = (credentials: Credentials) => (\n  accountEndpoint: string\n): string => `/accounts/${credentials.accountNumber}${accountEndpoint}`;\n\n// # _axiosApiGetEndpointFactory !!!\n/** PROVIDE: endpoint string with R return type and credentials THEN GET: a Promise<R> */\nexport const _axiosApiGetEndpointFactory = <R>(endpoint: string) => (\n  credentials: Credentials\n) => _axiosGetApi(credentials)<R>(endpoint);\n\n// # _axiosApiPostEndpointFactory !!!\n/** PROVIDE: endpoint string with R return type, postData with D data type and credentials THEN GET: a Promise<R> */\nexport const _axiosApiPostEndpointFactory = <R>(endpoint: string) => <D = any>(\n  postData: D\n) => (credentials: Credentials) =>\n  _axiosApiPost(credentials)<D>(postData)<R>(endpoint);\n\n// # _delayedCrednetialsFunction\n/** PROVIDE: credentials first and function of type (C: Credentials) => Promise<R> with R return type last THEN GET: an extra 'async () =>' that will return a Promise<R>, added at the end of composition chain */\nexport const _delayedCrednetialsFunction = (credentials: Credentials) => <\n  T = any\n>(\n  functionX: (C: Credentials) => Promise<T>\n) => async () => functionX(credentials);\n\n// # _delayedFunctionCredentials\n/** PROVIDE: function with R return type first (function of type (C: Credentials) => Promise<R>) and provide credentials last THEN GET: an extra 'async () =>' that will return a Promise<R>, added at the end of composition chain */\nexport const _delayedFunctionCredentials = <R>(\n  functionX: (C: Credentials) => Promise<R>\n) => (credentials: Credentials) => async () => functionX(credentials);\n\n// # _axiosApiGetEndpointFactoryD\n/** PROVIDE: endpoint string with R return type and credentials THEN GET: a '() => Promise<R>' */\n// todo: verify this seem to be wrong ...\nexport const _axiosApiGetEndpointFactoryD = <R>(endpoint: string) => (\n  credentials: Credentials\n) =>\n  _delayedFunctionCredentials(\n    _axiosApiGetEndpointFactory<R>(endpoint)(credentials)\n  )(credentials);\n\n// # _axiosApiPostEndpointFactoryD\n/** PROVIDE: endpoint string with R return type, postData with D data type and credentials THEN GET: a '() => Promise<R>' */\nexport const _axiosApiPostEndpointFactoryD = <R>(endpoint: string) => <D = any>(\n  postData: D\n) => (credentials: Credentials) =>\n  _delayedFunctionCredentials<R>(\n    _axiosApiPostEndpointFactory<R>(endpoint)<D>(postData)\n  )(credentials);\n"]}