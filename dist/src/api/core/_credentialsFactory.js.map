{"version":3,"file":"_credentialsFactory.js","sourceRoot":"","sources":["../../../../src/api/core/_credentialsFactory.ts"],"names":[],"mappings":"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","sourcesContent":["import { AxiosResponse, default as axios } from 'axios';\nimport { access, constants, readFileSync, writeFileSync } from 'fs';\nimport { dirname } from 'path';\nimport { _axiosGetApi } from '.';\nimport { sync } from '../utils';\nimport {\n  AcountNumberString,\n  Credentials,\n  IAccount,\n  IAccounts,\n  ITime,\n  QuestradeAPIOptions,\n} from './typescript';\n\nconst _getServerTime = (credentials: Credentials) => async () =>\n  _axiosGetApi(credentials)<Promise<ITime>>('/time')();\n\nconst _getAccounts = (credentials: Credentials) => async () =>\n  _axiosGetApi(credentials)<Promise<IAccounts>>('/accounts')();\n\n// # _credentialsFactory\n/** Provide: a token string THEN GET: a 'Promise<Credentials>' */\nexport const _credentialsFactory = async (token: string) => {\n  if (token.length === 4) {\n    //\n  }\n  const credentials = await _oAuthCredentials(token);\n\n  try {\n    const allAccounts = _getAccounts(credentials);\n    const serverTimeNow = _getServerTime(credentials);\n    const { accounts } = await allAccounts();\n    const { time } = await serverTimeNow();\n\n    const timZoneOffset = new Date(time).getTimezoneOffset();\n    const timZone = -1 * 60 * 1000 * timZoneOffset;\n    const serverTime = new Date(time).getTime();\n    const expireAt = serverTime + credentials.expiresIn * 1000;\n\n    credentials.expiresAt = new Date(expireAt).toLocaleTimeString();\n    credentials.tokenExpiration = new Date(timZone + expireAt);\n    credentials.expiresAtRaw = expireAt;\n    credentials.serverTime = new Date(timZone + serverTime);\n    credentials.serverTimeRaw = serverTime;\n\n    credentials.accountNumber = _getPrimaryAccountNumber(accounts);\n\n    console.info('Questrade Server Time:', time, '\\nStatus: ready\\n');\n  } catch (error) {\n    console.log(error.message);\n    throw new Error('_oAuth Error getting credentials');\n  }\n  return credentials;\n};\n\nconst _oAuthCredentials = async (token: string): Promise<Credentials> => {\n  const { refreshToken, credentials } = validateToken(token);\n  const axiosConfig = {\n    url: `${credentials.authUrl}/oauth2/token`,\n    params: {\n      grant_type: 'refresh_token',\n      refresh_token: refreshToken,\n    },\n  };\n\n  const response: AxiosResponse<any> = await axios(axiosConfig);\n\n  if (!response.data) {\n    throw new Error(\n      '!! validate credntials Invalid data back from axios client'\n    );\n  }\n  return writeToken(credentials, response);\n};\n\nconst writeToken = (\n  credentials: Credentials,\n  response: AxiosResponse<any>\n): Credentials => {\n  const { data: refreshCreds } = response;\n  credentials.accessToken = refreshCreds.access_token;\n  credentials.apiServer = refreshCreds.api_server;\n  credentials.expiresIn = refreshCreds.expires_in;\n  credentials.refreshToken = refreshCreds.refresh_token;\n  credentials.tokenType = refreshCreds.token_type;\n  credentials.apiUrl = `${credentials.apiServer}${credentials.apiVersion}`;\n  writeFileSync(credentials.keyFile, credentials.refreshToken, 'utf8');\n\n  return credentials;\n};\n\nconst validateToken = (options: QuestradeAPIOptions) => {\n  const credentials = buildCredentialsFromToken(options);\n  let refreshToken: string = credentials.seedToken || '';\n  try {\n    if (!!credentials.keyFile) {\n      sync(dirname(credentials.keyFile));\n    } else {\n      sync(credentials.keyDir);\n    }\n    credentials.keyFile =\n      credentials.keyFile || `${credentials.keyDir}/${credentials.seedToken}`;\n    refreshToken = readFileSync(credentials.keyFile, 'utf8');\n  } catch (_) {\n    credentials.keyFile =\n      credentials.keyFile || `${credentials.keyDir}/${credentials.seedToken}`;\n    access(credentials.keyFile, constants.F_OK, async none => {\n      if (none) {\n        writeFileSync(credentials.keyFile, credentials.seedToken, {\n          encoding: 'utf8',\n        });\n      }\n    });\n  }\n  return { refreshToken, credentials };\n};\n\nconst buildCredentialsFromToken = (token: QuestradeAPIOptions) => {\n  const credentials = emptyCredentials();\n\n  if (typeof token === 'undefined' || !token) {\n    throw new Error('questrade_missing_api_key or options');\n  }\n  if (typeof token === 'string' && token.indexOf('/') !== -1) {\n    credentials.keyFile = token;\n  }\n  if (typeof token === 'string' && token.indexOf('/') === -1) {\n    credentials.seedToken = token;\n  }\n  if (typeof token === 'object') {\n    credentials.practice = !!token.practiceAccount;\n    credentials.keyDir = token.keyDir || './keys';\n    credentials.apiVersion = token.apiVersion || 'v1';\n    credentials.keyFile = token.keyFile || '';\n    credentials.seedToken = token.seedToken || '';\n    credentials.accountNumber = `${token.account}` || '';\n  }\n  credentials.authUrl = credentials.practice\n    ? 'https://practicelogin.q.com'\n    : 'https://login.questrade.com';\n\n  return credentials;\n};\n\nconst emptyCredentials = () => {\n  const credentials: Credentials = _defaultCredentials;\n  credentials.accountNumber = '';\n  credentials.apiVersion = 'v1';\n  credentials.keyDir = './keys';\n  credentials.keyFile = '';\n  credentials.practice = false;\n  credentials.seedToken = '';\n  credentials.expiresIn = 0;\n  credentials.tokenType = '';\n  credentials.refreshToken = '';\n  credentials.accessToken = '';\n  credentials.apiUrl = '';\n  credentials.apiServer = '';\n  return credentials;\n};\n\n/** PROVIDE: IAccount[] THEN GET:  a 'primaryAccountNumber string'  */\nexport const _getPrimaryAccountNumber = (\n  accounts: IAccount[]\n): AcountNumberString => {\n  if (accounts.length < 1) {\n    throw new Error('No account number found');\n  }\n\n  if (accounts.length === 1) {\n    return accounts[0].number;\n  }\n\n  const primary = accounts.filter(account => account.isPrimary);\n  if (primary.length > 0) {\n    return primary[0].number;\n  }\n\n  return accounts[0].number;\n};\n\nexport const _defaultCredentials: Credentials = {\n  accessToken: '',\n  accountNumber: '',\n  apiServer: '',\n  apiUrl: '',\n  apiVersion: 'v1',\n  authUrl: '',\n  expiresAt: undefined,\n  tokenExpiration: undefined,\n  expiresIn: 0,\n  keyDir: './keys',\n  keyFile: '',\n  practice: false,\n  refreshToken: '',\n  seedToken: '',\n  serverTime: undefined,\n  tokenType: '',\n  toValue() {\n    return {\n      ...this,\n      accessToken: '[string:PRIVATE]',\n      keyFile: './keys/[PRIVATE]',\n      refreshToken: '[string:PRIVATE]',\n      seedToken: '[string:PRIVATE]',\n    }.toString();\n  },\n  toString() {\n    return {\n      ...this,\n      accessToken: ' [ PRIVATE ] ',\n      keyFile: './keys/[ PRIVATE ] ',\n      refreshToken: ' [ PRIVATE ] ',\n      seedToken: ' [ PRIVATE ] ',\n    }.toString();\n  },\n};\n"]}