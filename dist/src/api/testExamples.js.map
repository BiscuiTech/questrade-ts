{"version":3,"file":"testExamples.js","sourceRoot":"","sources":["../../../src/api/testExamples.ts"],"names":[],"mappings":"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","sourcesContent":["// TypeScript/JavaScript\nimport { day, Enumerations, redeemToken } from '.';\n\nconst testing = false;\n\nexport const testExamples = (\n  yourRefreshToken: string,\n  startTime: string,\n  endTime: string,\n  optionExpiryDate: string,\n  optionNumericID: number,\n  stockNumericID: number,\n  stockStringID: string\n) =>\n  (async () => {\n    // Using console.log (log) to output the\n    const log = console.log;\n    // always put your code in a try catch block\n    try {\n      // Create a questrade-ts Api (qtApi) Object redeeming your Refresh Token\n      const { qtApi: qt, credentials } = await redeemToken(yourRefreshToken);\n\n      // list of all the differents api calls managed by this package\n\n      // ACCOUNTS CALLS\n      // GET ACCOUNTS/:ID/ACTIVITIES\n      log(await qt.get.accounts.activities(startTime)(endTime));\n      // GET ACCOUNTS/:ID/ORDERS\n      log(await qt.get.accounts.orders(startTime)(endTime)('All'));\n      // GET ACCOUNTS/:ID/EXECUTIONS\n      log(await qt.get.accounts.executions(startTime)(endTime));\n      // GET ACCOUNTS/:ID/BALANCES\n      log(await qt.get.accounts.balances());\n      // GET ACCOUNTS/:ID/POSITIONS\n      log(await qt.get.accounts.positions());\n      // GET ACCOUNTS\n      log(await qt.get.accounts.allAccounts());\n      // GET TIME\n      log(await qt.get.accounts.time());\n\n      // MARKET CALLS\n      // GET MARKETS/CANDLES/:ID\n      log(\n        await qt.get.markets.candlesById(startTime)(endTime)('OneDay')(\n          stockNumericID\n        )\n      );\n      // GET MARKETS/QUOTES/STRATEGIES\n      log('NO IMPLEMENTATION AT HIS TIME');\n\n      // GET MARKETS/QUOTES/OPTIONS (filter)\n      log(\n        await qt.get.markets.quotes.options({\n          underlyingId: stockNumericID,\n          expiryDate: optionExpiryDate,\n        })\n      );\n      /*\n      underlyingId: number; [REQUIRED]\n      expiryDate: string; [REQUIRED]\n      optionType?: string | null; [OPTIONAL]\n      minstrikePrice?: number | null; [OPTIONAL]\n      maxstrikePrice?: number | null; [OPTIONAL]\n    */\n\n      // GET MARKETS/QUOTES/OPTIONS (byIds optionsIds array)\n      log(await qt.get.markets.quotes.options.byIds([optionNumericID]));\n      // GET MARKETS/QUOTES/:ID\n      log(await qt.get.markets.quotes.byIds([stockNumericID]));\n      // GET MARKETS\n      log(await qt.get.markets.allMarkets());\n      // GET SYMBOLS/:ID/OPTIONS (by single stockId)\n      log(await qt.get.symbols.optionsById(stockNumericID));\n      // GET SYMBOLS/SEARCH (return fisrt result or offseted result)\n      log(await qt.get.symbols.search(stockStringID));\n      // GET SYMBOLS/SEARCH (count of results or offseted results)\n      log((await qt.get.symbols.search(stockStringID)).count);\n      // GET SYMBOLS/SEARCH (count the number of results)\n      log(await qt.get.symbols.search.count(stockStringID));\n      /* OR */\n      log(await qt.get.symbols.searchCount(stockStringID));\n      // GET SYMBOLS/SEARCH (return ALL results can profide an offset as second)\n      log(await qt.get.symbols.searchAll(stockStringID));\n\n      // GET SYMBOLS/:ID (stockIds array)\n      log(await qt.get.symbols.byIds([stockNumericID]));\n      // Enumerations from questrade-api-enumerations NPM package (included)\n      /** Specifies all supported currency codes. */\n      console.dir(Enumerations.Currency);\n      /** Specifies all supported listing exchanges. */\n      console.dir(Enumerations.ListingExchange);\n      /** Specifies all supported user account types. */\n      console.dir(Enumerations.AccountType);\n      /** Specifies all supported account client types. */\n      console.dir(Enumerations.ClientAccountType);\n      /** Specifies all supported account status values. */\n      console.dir(Enumerations.AccountStatus);\n      /** Specifies all supported market data tick types. */\n      console.dir(Enumerations.TickType);\n      /** Specifies all supported option types. */\n      console.dir(Enumerations.OptionType);\n      /** Specifies all supported option duration types. */\n      console.dir(Enumerations.OptionDurationType);\n      /** Specifies all supported option exercise types. */\n      console.dir(Enumerations.OptionExerciseType);\n      /** Specifies all supported security types. */\n      console.dir(Enumerations.SecurityType);\n      /** Specifies all supported order state filter types. */\n      console.dir(Enumerations.OrderStateFilterType);\n      /** Specifies all supported order side values. */\n      console.dir(Enumerations.OrderAction);\n      /** Specifies all supported client order side values. */\n      console.dir(Enumerations.OrderSide);\n      /** Specifies all supported order types. */\n      console.dir(Enumerations.OrderType);\n      /** Specifies all supported order Time-In-Force instructions. */\n      console.dir(Enumerations.OrderTimeInForce);\n      /** Specifies all supported order states. */\n      console.dir(Enumerations.OrderState);\n      /** Specifies all supported order execution status values. */\n      console.dir(Enumerations.HistoricalDataGranularity);\n      /** Specifies all supported bracket order components. */\n      console.dir(Enumerations.OrderClass);\n      /** Supported types of strategies for multi-leg strategy orders. */\n      console.dir(Enumerations.StrategyTypes);\n\n      // return private credentials\n      log(credentials);\n    } catch (error) {\n      // manage your errors here if needed\n      console.error(error.message);\n    }\n  })();\n\nfunction runExamples(isTesting: boolean = false) {\n  if (!isTesting) return;\n\n  // for easier reading of the examples\n  const toISOStringDate = (dateTime: number | string) =>\n    new Date(dateTime).toISOString();\n  // for easier reading of the examples\n\n  // convert days to miliseconds for calculations in date\n  const tenDays = day(10);\n\n  // to have a start and end dateTime to use in examples\n  const timeNow = Date.now();\n  const start = timeNow - tenDays;\n  const end = timeNow;\n  const exampleStartTime = toISOStringDate(start);\n  const exampleEndTime = toISOStringDate(end);\n\n  const exampleOptionExpiryDate: string = '2019-10-04T05:37:30.053Z';\n  const exampleOptionNumericID: number = 27003348;\n  const exampleStockNumericID: number = 8049; // 'aapl'\n  const exampleStockStringID: string = 'aapl'; // 8049\n\n  // you do not have to put the token in plain text you should import it from elsewhere\n  // const refreshToken = 'YOUR-TOKEN-HERE_jKi1YCwCjAMJFugwD4A8cgb0';\n  const refreshToken = 'G0DpF1a5ANONc1kgkC5aOuoMUMrW0X0l0';\n  // using async Immediately Invoked Function Expressions to avoid using then().catch()\n\n  testExamples(\n    refreshToken,\n    exampleStartTime,\n    exampleEndTime,\n    exampleOptionExpiryDate,\n    exampleOptionNumericID,\n    exampleStockNumericID,\n    exampleStockStringID\n  );\n\n  return;\n}\n\nrunExamples(testing);\n"]}