{"version":3,"file":"debugtesting.js","sourceRoot":"","sources":["../../../src/api/debugtesting.ts"],"names":[],"mappings":";;;AAAA,sBAAoC;AACpC,iCAAwC;AAGxC,IAAM,cAAc,GAAG,mCAAmC,CAAC;AAE3D,IAAM,MAAM,GAAG,CAAC,CAAC;AAEjB,IAAM,SAAS,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,WAAG,CAAC,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC;AAC9D,IAAM,OAAO,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC,WAAW,EAAE,CAAC;AAEnD,CAAC;;;;oBAC6B,WAAM,kBAAe,CAAC,cAAc,CAAC,EAAA;;gBAA3D,KAAsB,SAAqC,EAAzD,EAAE,QAAA,EAAE,WAAW,iBAAA;gBAEvB,WAAM,WAAG,CAAC;wBAAY,WAAA,EAAE,CAAC,aAAa,EAAE,EAAA;6BAAA,CAAC,EAAA;;gBAAzC,SAAyC,CAAC;gBAgB1C,KAAA,WAAG,CAAA;gBAAC,WAAM,EAAE,CAAC,GAAG,CAAC,QAAQ,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC,OAAO,CAAC,EAAA;;gBAAxD,kBAAI,SAAoD,EAAC,CAAC;gBAwE1D,WAAO,WAAW,EAAC;;;KACpB,CAAC,EAAE;KACD,IAAI,CAAC,UAAA,IAAI;IACR,WAAG,CAAC,cAAM,OAAA,IAAI,EAAJ,CAAI,CAAC,CAAC;AAClB,CAAC,CAAC;KACD,KAAK,CAAC,UAAA,KAAK;IACV,OAAA,OAAO,CAAC,GAAG,CACT,QAAQ,EACR,MAAM,EACN,gCAAgC,EAChC,KAAK,CAAC,OAAO,CACd;AALD,CAKC,CACF,CAAC","sourcesContent":["import { tokenConnection } from '.';\nimport { day, id0, log } from './utils';\n// import { types } from 'util';\n// types.\nconst myRefreshToken = 'IskeVOywsgf1xx3305wA64BGKwyVibRQ0';\n\nconst aValue = 0;\n\nconst startTime = new Date(Date.now() - day(1)).toISOString();\nconst endTime = new Date(Date.now()).toISOString();\n\n(async () => {\n  const { qt, credentials } = await tokenConnection(myRefreshToken);\n\n  await id0(async () => qt.getServerTime());\n\n  // await id0(async () => qt.setAccount, 'Test #', ++aValue);\n\n  // await id0(\n  //   async () => qt.get.accounts.activities(startTime)(endTime),\n  //   'Test #',\n  //   ++aValue\n  // );\n\n  // await id0(async () => qt.get.accounts.allAccounts(), 'Test #', ++aValue);\n\n  // await id0(async () => qt.get.accounts.balances(), 'Test #', ++aValue);\n\n  // await id0(\n  // async () =>\n  log(await qt.get.accounts.executions(startTime)(endTime));\n  //   'Test #',\n  //   ++aValue\n  // );\n\n  // await id0(\n  //   async () => qt.get.accounts.orders(startTime)(endTime)('All'),\n  //   'Test #',\n  //   ++aValue\n  // );\n\n  // // await id0(\n  // //   async () => qt.get.accounts.ordersAll(startTime)(endTime),\n  // //   'Test #',\n  // //   ++aValue,\n  // //   '!'\n  // // );\n\n  // await id0(\n  //   async () => qt.get.accounts.ordersByIds([546964950, 546966570]),\n  //   'Test #',\n  //   ++aValue\n  // );\n\n  // await id0(async () => qt.get.accounts.positions(), 'Test #', ++aValue);\n\n  // await id0(async () => qt.get.accounts.time(), 'Test #', ++aValue);\n\n  // await id0(\n  //   async () => qt.get.markets.quotes.byIds([8049, 8049]),\n  //   'Test #',\n  //   ++aValue\n  // );\n\n  // await id0(\n  //   async () => qt.get.markets.quotes.options.byIds([27003348]),\n  //   'Test #',\n  //   ++aValue\n  // );\n\n  // await id0(async () => qt.get.markets.quotes.byStrategies, 'Test #', ++aValue);\n\n  // await id0(\n  //   async () => qt.get.markets.candlesById(startTime)(endTime)('OneDay')(8049),\n  //   'Test #',\n  //   ++aValue\n  // );\n\n  // await id0(async () => qt.get.markets.allMarkets(), 'Test #', ++aValue);\n\n  // await id0(async () => qt.get.symbols.byIds([8049, 8049]), 'Test #', ++aValue);\n\n  // await id0(\n  //   async () => qt.get.symbols.optionsById(27003348),\n  //   'Test #',\n  //   ++aValue\n  // );\n\n  // await id0(async () => qt.get.symbols.search('aapl'), 'Test #', ++aValue);\n\n  // await id0(\n  //   async () => (await qt.get.symbols.search('aapl')).count,\n  //   'Test #',\n  //   ++aValue\n  // );\n\n  // await id0(\n  //   async () => qt.get.symbols.search.count('aapl'),\n  //   'Test #',\n  //   ++aValue\n  // );\n\n  return credentials;\n})()\n  .then(cred => {\n    id0(() => cred);\n  })\n  .catch(error =>\n    console.log(\n      'Test #',\n      aValue,\n      'error message in debugtesting:',\n      error.message\n    )\n  );\n\n// async function accountCallsTimings(){\n\n//   let datenow = Date.now();\n\n//   datenow = Date.now();\n//   await  id0(async ()=>await qt.getActivities(startTime)(endTime)), 'getActivities(startTime)(endTime)', Date.now() - datenow,;\n\n//   datenow = Date.now();\n//   await  id0(async ()=>await qt.getOrders(startTime)(endTime)('All');\n//   log(\"getOrders(startTime)(endTime)('All')\", Date.now() - datenow, 'ms');\n\n//   datenow = Date.now();\n//   await  id0(async ()=>await qt.getOrderByIds([546964950, 546966570])), 'getOrderByIds([546964950, 546966570])', Date.now() - datenow,;\n\n//   datenow = Date.now();\n//   await  id0(async ()=>await qt.getExecutions(startTime)(endTime)), 'getExecutions(startTime)(endTime)', Date.now() - datenow,;\n\n//   datenow = Date.now();\n//   await  id0(async ()=>await qt.getBalances()), 'getBalances()', Date.now() - datenow,;\n\n//   datenow = Date.now();\n//   await  id0(async ()=>await qt.getPositions()), 'getPositions()', Date.now() - datenow,;\n\n//   datenow = Date.now();\n//   await  id0(async ()=>await qt.getAccounts()), 'getAccounts()', Date.now() - datenow,;\n\n//   datenow = Date.now();\n//   await  id0(async ()=>await qt.getServerTime()), 'getServerTime()', Date.now() - datenow,;\n\n//   log(\n//     'serverTime offset with client:',\n//     (await qt.getServerTime()).valueOf() - Date.now(),\n//     'ms'\n//   );\n\n//\n\n// async function marketCallsTimings() {\n//   let datenow = Date.now(;\n\n//   datenow = Date.now();\n//   await  id0(async ()=>await qt.getCandles(startTime)(endTime)('OneDay')(8049);\n//   log(\n//     \"getCandles(startTime)(endTime)('OneDay')(8049)\",\n//     Date.now() - datenow,\n//     'ms'\n//   );, 'markets/quotes/strate\n\n//   datenow = Date.now(, 'markets/quotes/opt);\n//   await  id0(async ()=>await qt.getQuotesByIds([8049])), 'getQuotesByID([8049])', Date.now() - datenow,;\n\n//   datenow = Date.now();\n//   await  id0(async ()=>await qt.getMarkets()), 'getMarkets()', Date.now() - datenow,;\n\n//   datenow = Date.now();\n//   log(await qt.getOptionsById(8049);\n\n// option symbol id : 270033, 'getOptionsSymbolsByIds(8049)', Date.now() - datenow,48\n\n//   datenow = Date.now();\n//   await  id0(async ()=>await qt.getSymbolSearch('aapl')), 'getSymbolSearch(\"aapl\")', Date.now() - datenow,;\n\n//   datenow = Date.now();\n//   await  id0(async ()=>await qt.getSymbolsByIds([8049])), 'getSymbolsByIDs([8049])', Date.now() - datenow,;\n\n// }\n// const postData: OptionsPostData = { optionIds: [26947351, 26947367] };\n// log(\n// await _marketsQuotesOptions(credentials)(\n// )(\n// null, // postData.optionIds,\n// 8049,\n// '2019-10-04T00:00:00.000000-04:00'\n// )\n// );\n// symbolId: 26947351\n// await accountCallsTimings();\n// await marketCallsTimings();\n"]}