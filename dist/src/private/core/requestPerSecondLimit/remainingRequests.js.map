{"version":3,"file":"remainingRequests.js","sourceRoot":"","sources":["../../../../../src/private/core/requestPerSecondLimit/remainingRequests.ts"],"names":[],"mappings":";;AAGa,QAAA,iBAAiB,GAAG,UAC/B,QAA0B,EAC1B,iBAA8B;IAA9B,kCAAA,EAAA,sBAA8B;IAE9B,IAAM,cAAc,GAAG,QAAQ,CAAC,QAAQ,CAAC,OAAO,CAAC,uBAAuB,CAAC,EAAE,CAAC,CAAC,CAAC;IAC9E,IAAM,cAAc,GAAG,QAAQ,CAAC,QAAQ,CAAC,OAAO,CAAC,mBAAmB,CAAC,EAAE,CAAC,CAAC,CAAC;IAE1E,IAAM,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,EAAE,CAAC,OAAO,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC;IAC5D,IAAM,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC;IAC5C,IAAM,eAAe,GAAG,cAAc,GAAG,OAAO,CAAC;IAEjD,IAAM,kBAAkB,GAAG,IAAI,CAAC,KAAK,CACnC,IAAI,CAAC,GAAG,CAAC,cAAc,GAAG,eAAe,EAAE,iBAAiB,CAAC,CAC9D,CAAC;IACF,IAAM,QAAQ,GAA6B;QACzC,cAAc;QACd,kBAAkB;QAClB,iBAAiB;KAClB,CAAC;IAEF,OAAO;QACL,OAAO,SAAA;QACP,QAAQ,UAAA;QACR,eAAe,iBAAA;QACf,iBAAiB,mBAAA;QACjB,kBAAkB,oBAAA;QAClB,iBAAiB,EAAE,cAAc;QACjC,QAAQ,UAAA;KACT,CAAC;AACJ,CAAC,CAAC","sourcesContent":["import { AxiosResponse } from 'axios';\nimport { ITimeRateLimiter } from '../../../typescript/ITimeRateLimiter';\n\nexport const remainingRequests = <T>(\n  response: AxiosResponse<T>,\n  maximumperseconds: number = 20\n): ITimeRateLimiter => {\n  const limitRemaining = parseInt(response.headers['x-ratelimit-remaining'], 2);\n  const timeUntilReset = parseInt(response.headers['x-ratelimit-reset'], 2);\n\n  const timeNow = Math.floor(new Date().getTime() / 1000) + 1;\n  const timeThen = Math.floor(timeUntilReset);\n  const secondsRemaning = timeUntilReset - timeNow;\n\n  const possiblePerSeconds = Math.floor(\n    Math.min(limitRemaining / secondsRemaning, maximumperseconds)\n  );\n  const maximums: [number, number, number] = [\n    limitRemaining,\n    possiblePerSeconds,\n    maximumperseconds,\n  ];\n\n  return {\n    timeNow,\n    timeThen,\n    secondsRemaning,\n    maximumperseconds,\n    possiblePerSeconds,\n    requestsRemaining: limitRemaining,\n    maximums,\n  };\n};\n"]}