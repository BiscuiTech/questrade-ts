{"version":3,"file":"requestPerSecondLimit.js","sourceRoot":"","sources":["../../../../../src/private/core/requestPerSecondLimit/requestPerSecondLimit.ts"],"names":[],"mappings":";;;AAAA,wCAAmD;AAEnD,SAAS,qBAAqB;IAC5B,IAAI,QAAQ,GAAG,KAAK,CAAC;IACrB,IAAM,UAAU,GAA2B,EAAE,CAAC;IAC9C,OAAO,SAAS,cAAc,CAAC,EAAY,EAAE,KAAiB;QAAjB,sBAAA,EAAA,SAAiB;QAC5D,IAAM,SAAS,GAAG;;;;oBAChB,IAAI,UAAU,CAAC,MAAM,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;wBACvC,QAAQ,GAAG,IAAI,CAAC;wBAChB,UAAU,CAAC;;;;;4CACT,QAAQ,GAAG,KAAK,CAAC;4CACjB,qBAAM,SAAS,EAAE,EAAA;;4CAAjB,SAAiB,CAAC;4CAClB,sBAAO,KAAK,CAAC,EAAC;;;;yBACf,EAAE,kBAAU,CAAC,KAAK,CAAC,CAAC,CAAC;wBAChB,KAAK,GAAG,UAAU,CAAC,GAAG,EAAE,CAAC;wBACzB,KAAe,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,OAAO,CAAC,EAAtD,IAAI,QAAA,EAAE,IAAI,QAAA,CAA6C;wBAC9D,IAAI,CAAC,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC;wBACnB,sBAAO,KAAK,CAAC,EAAC;qBACf;oBACD,sBAAO,KAAK,CAAC,EAAC;;;SACf,CAAC;QAEF,OAAO,SAAe,UAAU,CAAC,EAAY;;;oBAC3C,UAAU,CAAC,OAAO,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC;oBAC7B,SAAS,EAAE,CAAC;oBACZ,sBAAO,KAAK,CAAC,EAAC;;;SACf,CAAC;IACJ,CAAC,CAAC;AACJ,CAAC;AAEY,QAAA,WAAW,GAAG,UAAI,UAA2C;IACxE,OAAO,IAAI,OAAO,CAAI,UAAC,OAAO,EAAE,MAAM;QACpC,UAAU,CAAC,UAAC,KAAK,EAAE,MAAM;YACvB,IAAI,CAAC,CAAC,KAAK,EAAE;gBACX,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;gBAErB,MAAM,CAAC,KAAK,CAAC,CAAC;gBACd,OAAO,KAAK,CAAC,CAAC;aACf;YACD,OAAO,CAAC,MAAM,CAAC,CAAC;YAChB,OAAO,KAAK,CAAC,CAAC;QAChB,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC;AAEF,SAAS,eAAe,CAAC,cAAiC;IAA1D,iBAMC;IALC,IAAM,cAAc,GAAG,cAAc,EAAE,CAAC;IACxC,OAAO,UAAC,EAAU,IAAK,OAAA,UAAU,EAAW;;;YACpC,UAAU,GAAG,cAAc,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;YAC1C,sBAAO,mBAAW,CAAI,UAAU,CAAC,EAAC;;SACnC,EAHsB,CAGtB,CAAC;AACJ,CAAC;AAED,IAAM,WAAW,GAAG;;QAClB,aAAK,EAAE,CAAC;QACR,MAAM,IAAI,KAAK,CACb,iEAAiE,CAClE,CAAC;;KACH,CAAC;AACF,IAAM,OAAO,GAAG,UAAC,KAAmB,EAAE,WAAgB;IACpD,aAAK,CAAC,EAAE,WAAW,aAAA,EAAE,KAAK,OAAA,EAAE,CAAC,CAAC;IAC9B,MAAM,IAAI,KAAK,CACb,iEAAiE,CAClE,CAAC;AACJ,CAAC,CAAC;AAEW,QAAA,qBAAqB,GAAG,eAAe,CAAC,qBAAqB,CAAC,CAAC","sourcesContent":["import { perSeconds, void0 } from '../../../utils';\n\nfunction requestLimiterFactory() {\n  let isCalled = false;\n  const callsQueue: [Function, CallBack][] = [];\n  return function requestLimiter(fn: Function, hertz: number = 1) {\n    const callToPop = async function(): Promise<void> {\n      if (callsQueue.length >= 1 && !isCalled) {\n        isCalled = true;\n        setTimeout(async function(): Promise<void> {\n          isCalled = false;\n          await callToPop();\n          return void 0;\n        }, perSeconds(hertz));\n        const poped = callsQueue.pop();\n        const [myfn, mycb] = !!poped ? poped : [neverWillCb, neverCb];\n        mycb(null, myfn());\n        return void 0;\n      }\n      return void 0;\n    };\n\n    return async function addToQueue(cb: CallBack): Promise<void> {\n      callsQueue.unshift([fn, cb]);\n      callToPop();\n      return void 0;\n    };\n  };\n}\n\nexport const myPromisify = <T>(addToQueue: (cb: CallBack) => Promise<void>) => {\n  return new Promise<T>((resolve, reject) => {\n    addToQueue((error, result) => {\n      if (!!error) {\n        console.error(error);\n\n        reject(error);\n        return void 0;\n      }\n      resolve(result);\n      return void 0;\n    });\n  });\n};\n\nfunction limitingRequest(limiterFactory: ReqLimiterFactory) {\n  const requestLimiter = limiterFactory();\n  return (hz: number) => async <T>(fn: () => T) => {\n    const addToQueue = requestLimiter(fn, hz);\n    return myPromisify<T>(addToQueue);\n  };\n}\n\nconst neverWillCb = async () => {\n  void0();\n  throw new Error(\n    'NEVER: lenght is validated prior to pop this should never occur'\n  );\n};\nconst neverCb = (error: Error | null, returnValue: any) => {\n  void0({ returnValue, error });\n  throw new Error(\n    'NEVER: lenght is validated prior to pop this should never occur'\n  );\n};\n\nexport const requestPerSecondLimit = limitingRequest(requestLimiterFactory);\n\nexport type CallBack = (error: Error | null, returnValue: Promise<any>) => void;\nexport type ReqLimiterFactory = () => (\n  fn: Function,\n  hertz?: number\n) => (cb: CallBack) => Promise<void>;\n"]}