{"version":3,"file":"_tryToGetData_AXIOS.js","sourceRoot":"","sources":["../../../../src/private/core/_tryToGetData_AXIOS.ts"],"names":[],"mappings":";;;AAAA,wDAA6C;AAG7C,iEAIiC;AACpB,QAAA,aAAa,GAAG,UAC3B,OAAyB,EACzB,WAAyB;IAEzB,OAAO,UAAO,SAAoB;;;;;;;oBAExB,kBAAkB,GACtB,CAAC,CAAC,WAAW;wBACb,CAAC,CAAC,WAAW,CAAC,iBAAiB;wBAC/B,CAAC,CAAC,WAAW,CAAC,iBAAiB,CAAC,kBAAkB;wBAChD,CAAC,CAAC,WAAW,CAAC,iBAAiB,CAAC,kBAAkB;wBAClD,CAAC,CAAC,EAAE,CAAC;oBACL,QAAQ,SAAe,CAAC;yBACxB,CAAA,kBAAkB,IAAI,EAAE,CAAA,EAAxB,wBAAwB;oBAEpB,cAAc,GAAG,+CAAuB,CAAC,kBAAkB,CAAC,CAAC;oBACxD,qBAAM,cAAc,CAC7B;4BAAuC,sBAAA,eAAK,CAAC,OAAO,CAAC,EAAA;iCAAA,CACtD,EAAA;;oBAFD,QAAQ,GAAG,SAEV,CAAC;;wBAES,qBAAM,eAAK,CAAC,OAAO,CAAC,EAAA;;oBAA/B,QAAQ,GAAG,SAAoB,CAAC;;;oBAElC,IAAI,QAAQ,CAAC,MAAM,KAAK,GAAG,EAAE;wBAC3B,OAAO,CAAC,GAAG,CAAC,kDAAkD,CAAC,CAAC;wBAChE,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,MAAM,EAAE,QAAQ,CAAC,UAAU,CAAC,CAAC;wBAClD,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;wBAC3B,OAAO,CAAC,KAAK,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;wBAChC,OAAO,CAAC,GAAG,CACT,0CAAkB,CAChB,aAAA,WAAW,0CAAE,iBAAiB,0CAAE,eAAe,EAC7C,CAAC,CAAC,WAAW,CAAC,iBAAiB,CAAC,eAAe;4BAC/C,CAAC,CAAC,CAAC,CACN,CACF,CAAC;wBACF,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,MAAM,EAAE,QAAQ,CAAC,UAAU,CAAC,CAAC;wBAClD,OAAO,CAAC,GAAG,CAAC,kDAAkD,CAAC,CAAC;wBAChE,OAAO,CAAC,GAAG,CAAC,kDAAkD,CAAC,CAAC;qBACjE;yBAAM;wBACL,eAAe;wBACf,wBAAwB;wBACxB,sDAAsD;wBACtD,yDAAyD;wBACzD,YAAY;wBACZ,MAAM;wBACN,KAAK;qBACN;oBACO,IAAI,GAAK,QAAQ,KAAb,CAAc;oBAC1B,IAAI,CAAC,IAAI,EAAE;wBACT,MAAM,SAAS,CAAC,IAAI,KAAK,CAAC,qCAAqC,CAAC,CAAC,CAAC;qBACnE;oBACD,IAAI;wBACF,IAAI,WAAW,EAAE;4BACf,WAAW,CAAC,iBAAiB,GAAG,yCAAiB,CAAC,QAAQ,CAAC,CAAC;yBAC7D;qBACF;oBAAC,OAAO,KAAK,EAAE;wBACd,OAAO,CAAC,KAAK,CACX,kEAAkE,CACnE,CAAC;qBACH;oBACD,sBAAO,IAAI,EAAC;;;oBAEZ,OAAO,CAAC,KAAK,CAAC,SAAS,CAAC,OAAK,CAAC,CAAC,OAAO,CAAC,CAAC;oBACxC,MAAM,OAAK,CAAC;;;;SAEf,CAAC;AACJ,CAAC,CAAC","sourcesContent":["import axios, { AxiosResponse } from 'axios';\nimport { CoreApiConfig, LogErrors } from '../../typescript';\nimport { Credentials } from '../../typescript/Credentials';\nimport {\n  remainingRequests,\n  remaningTimeString,\n  requestPerSecondLimiter,\n} from './requestPerSecondLimit';\nexport const _tryToGetData = <R, D>(\n  _config: CoreApiConfig<D>,\n  credentials?: Credentials\n) => {\n  return async (_logError: LogErrors): Promise<R> => {\n    try {\n      const possiblePerSeconds =\n        !!credentials &&\n        !!credentials.remainingRequests &&\n        !!credentials.remainingRequests.possiblePerSeconds\n          ? credentials.remainingRequests.possiblePerSeconds\n          : 21;\n      let response: AxiosResponse;\n      if (possiblePerSeconds <= 20) {\n        //\n        const requestLimiter = requestPerSecondLimiter(possiblePerSeconds);\n        response = await requestLimiter(\n          async (): Promise<AxiosResponse<R>> => axios(_config)\n        );\n      } else {\n        response = await axios(_config);\n      }\n      if (response.status !== 200) {\n        console.log('________________________________________________');\n        console.log(response.status, response.statusText);\n        console.log(response.data);\n        console.table(response.headers);\n        console.log(\n          remaningTimeString(\n            credentials?.remainingRequests?.secondsRemaning\n              ? credentials.remainingRequests.secondsRemaning\n              : 0\n          )\n        );\n        console.log(response.status, response.statusText);\n        console.log('________________________________________________');\n        console.log('++++++++++++++++++++++++++++++++++++++++++++++++');\n      } else {\n        // console.log(\n        //   remaningTimeString(\n        //     credentials?.remainingRequests?.secondsRemaning\n        //       /? credentials.remainingRequests.secondsRemaning\n        //       : 0\n        //   )\n        // );\n      }\n      const { data } = response;\n      if (!data) {\n        throw _logError(new Error(\"Can't retrive data from call to API\"));\n      }\n      try {\n        if (credentials) {\n          credentials.remainingRequests = remainingRequests(response);\n        }\n      } catch (error) {\n        console.error(\n          \"To make tests pass removed 'throw' error messages from code bloc\"\n        );\n      }\n      return data;\n    } catch (error) {\n      console.error(_logError(error).message);\n      throw error;\n    }\n  };\n};\n"]}