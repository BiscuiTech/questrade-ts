{"version":3,"file":"_tryToGetData_AXIOS.js","sourceRoot":"","sources":["../../../../src/private/core/_tryToGetData_AXIOS.ts"],"names":[],"mappings":";;;AAAA,wDAA6C;AAG7C,iEAAgE;AACnD,QAAA,aAAa,GAAG,UAC3B,OAAyB,EACzB,WAAwB;IAExB,OAAO,UAAO,SAAoB;;;;;;oBAExB,kBAAkB,GACtB,CAAC,CAAC,WAAW;wBACb,CAAC,CAAC,WAAW,CAAC,iBAAiB;wBAC/B,CAAC,CAAC,WAAW,CAAC,iBAAiB,CAAC,kBAAkB;wBAChD,CAAC,CAAC,WAAW,CAAC,iBAAiB,CAAC,kBAAkB;wBAClD,CAAC,CAAC,EAAE,CAAC;oBAEH,YAAY,GAAG,6CAAqB,CAAC,kBAAkB,CAAC,CAAC;oBAC9C,qBAAM,YAAY,CACjC;4BAAuC,sBAAA,eAAK,CAAC,OAAO,CAAC,EAAA;iCAAA,CACtD,EAAA;;oBAFK,QAAQ,GAAG,SAEhB;oBACO,IAAI,GAAK,QAAQ,KAAb,CAAc;oBAC1B,IAAI,CAAC,IAAI,EAAE;wBACT,MAAM,SAAS,CAAC,IAAI,KAAK,CAAC,qCAAqC,CAAC,CAAC,CAAC;qBACnE;oBAED,sBAAO,QAAQ,EAAC;;;oBAEhB,SAAS,CAAC,OAAK,CAAC,CAAC;oBACjB,MAAM,OAAK,CAAC;;;;SAEf,CAAC;AACJ,CAAC,CAAC;AAEF,qBAAqB;AACrB,+BAA+B;AAC/B,6CAA6C;AAE7C,iCAAiC;AACjC,oBAAoB;AACpB,iCAAiC;AACjC,iCAAiC;AACjC,gCAAgC;AAChC,4DAA4D;AAE5D,qDAAqD;AAErD,6BAA6B;AAC7B,eAAe","sourcesContent":["import axios, { AxiosResponse } from 'axios';\nimport { CoreApiConfig, LogErrors } from '../../typescript';\nimport { Credentials } from './../../typescript/ICredentials';\nimport { requestPerSecondLimit } from './requestPerSecondLimit';\nexport const _tryToGetData = <R, D>(\n  _config: CoreApiConfig<D>,\n  credentials: Credentials\n) => {\n  return async (_logError: LogErrors): Promise<AxiosResponse<R>> => {\n    try {\n      const possiblePerSeconds =\n        !!credentials &&\n        !!credentials.remainingRequests &&\n        !!credentials.remainingRequests.possiblePerSeconds\n          ? credentials.remainingRequests.possiblePerSeconds\n          : 20;\n\n      const requestLimit = requestPerSecondLimit(possiblePerSeconds);\n      const response = await requestLimit(\n        async (): Promise<AxiosResponse<R>> => axios(_config)\n      );\n      const { data } = response;\n      if (!data) {\n        throw _logError(new Error(\"Can't retrive data from call to API\"));\n      }\n\n      return response;\n    } catch (error) {\n      _logError(error);\n      throw error;\n    }\n  };\n};\n\n// logData(response);\n// remainingRequests(response);\n// logRemanings(remainingRequests(response));\n\n// console.log(':::RESPONSE==>');\n// console.dir(res);\n// console.log('void 0', void 0);\n// console.log('<==RESPONSE:::');\n// console.log('DATA:::', data);\n// console.log('JSON STRING DATA:::', JSON.stringify(data));\n\n// console.log('CONFIG:::', JSON.stringify(_config));\n\n//  const requester = () =>''\n//  requester()\n"]}