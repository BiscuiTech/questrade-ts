{"version":3,"file":"_validateToken.js","sourceRoot":"","sources":["../../../../../src/private/auth/axiosCredentials_oAUTH/_validateToken.ts"],"names":[],"mappings":";;;AAAA,yBAAoE;AACpE,6BAA+B;AAE/B,wCAAsC;AACtC,4DAAmE;AAEtD,QAAA,cAAc,GAAG,UAAC,OAA4B;IACzD,IAAM,WAAW,GAAG,+CAA0B,CAAC,OAAO,CAAC,CAAC;IACxD,IAAI,YAAY,GAAW,WAAW,CAAC,SAAS,CAAC;IACjD,IAAI;QACF,IAAI,CAAC,CAAC,WAAW,CAAC,OAAO,EAAE;YACzB,YAAI,CAAC,cAAO,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC,CAAC;SACpC;aAAM;YACL,YAAI,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;SAC1B;QACD,WAAW,CAAC,OAAO;YACd,WAAW,CAAC,MAAM,SAAI,WAAW,CAAC,SAAW,IAAI,WAAW,CAAC,OAAO,CAAC;QAC1E,YAAY,GAAG,iBAAY,CAAC,WAAW,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;KAC1D;IAAC,OAAO,CAAC,EAAE;QACV,WAAW,CAAC,OAAO;YACjB,WAAW,CAAC,OAAO,IAAO,WAAW,CAAC,MAAM,SAAI,WAAW,CAAC,SAAW,CAAC;QAC1E,WAAM,CAAC,WAAW,CAAC,OAAO,EAAE,cAAS,CAAC,IAAI,EAAE,UAAM,IAAI;;gBACpD,IAAI,IAAI,EAAE;oBACR,kBAAa,CAAC,WAAW,CAAC,OAAO,EAAE,WAAW,CAAC,SAAS,EAAE;wBACxD,QAAQ,EAAE,MAAM;qBACjB,CAAC,CAAC;iBACJ;;;aACF,CAAC,CAAC;KACJ;IACD,OAAO,EAAE,YAAY,cAAA,EAAE,WAAW,aAAA,EAAE,CAAC;AACvC,CAAC,CAAC","sourcesContent":["import { access, constants, readFileSync, writeFileSync } from 'fs';\nimport { dirname } from 'path';\nimport { QuestradeAPIOptions } from '../../../typescript';\nimport { sync } from '../../../utils';\nimport { _buildCredentialsFromToken } from '../credentialsFactory';\n\nexport const _validateToken = (options: QuestradeAPIOptions) => {\n  const credentials = _buildCredentialsFromToken(options);\n  let refreshToken: string = credentials.seedToken;\n  try {\n    if (!!credentials.keyFile) {\n      sync(dirname(credentials.keyFile));\n    } else {\n      sync(credentials.keyDir);\n    }\n    credentials.keyFile =\n      `${credentials.keyDir}/${credentials.seedToken}` && credentials.keyFile;\n    refreshToken = readFileSync(credentials.keyFile, 'utf8');\n  } catch (_) {\n    credentials.keyFile =\n      credentials.keyFile || `${credentials.keyDir}/${credentials.seedToken}`;\n    access(credentials.keyFile, constants.F_OK, async none => {\n      if (none) {\n        writeFileSync(credentials.keyFile, credentials.seedToken, {\n          encoding: 'utf8',\n        });\n      }\n    });\n  }\n  return { refreshToken, credentials };\n};\n"]}