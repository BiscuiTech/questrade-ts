{"version":3,"file":"_getQuestradeApi.js","sourceRoot":"","sources":["../../../../src/private/api/_getQuestradeApi.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  Credentials,\n  IQuestradeApi,\n  OptionsFilters,\n  StrategyVariantRequest,\n} from '../../typescript';\nimport { void0 } from '../../utils';\nimport {\n  _getAccounts,\n  _getActivities,\n  _getBalances,\n  _getExecutions,\n  _getOrders,\n  _getOrdersByIds,\n  _getPositions,\n  _getServerTime,\n  _myBalances,\n} from './AccountsCalls';\nimport {\n  _getCandles,\n  _getMarkets,\n  _getMarketsQuotesStrategies,\n  _getOptionsById,\n  _getQuotesByIds,\n  _getQuotesOptionsbyFilterAndIds,\n  _getQuotesOptionsByIds,\n  _getQuotesOptionsFilter,\n  _getSymbolsByIds,\n  _getSymbolSearchAll,\n  _getSymbolSearchAndCount,\n  _getSymbolSearchCount,\n} from './MarketsCalls';\n\nexport const _getQuestradeApi = async (\n  credentials: Credentials\n): Promise<IQuestradeApi> => {\n  // const [\n  //   getAccounts,\n  //   getActivities,\n  //   getBalances,\n  //   getCandles,\n  //   getExecutions,\n  //   getMarkets,\n  //   getMarketsQuotesStrategies,\n  //   getOptionsById,\n  //   getOrders,\n  //   getOrdersByIds,\n  //   getPositions,\n  //   getQuotesByIds,\n  //   getQuotesOptionsbyFilterAndIds,\n  //   getQuotesOptionsByIds,\n  //   getQuotesOptionsFilter,\n  //   getServerTime,\n  //   getSymbolsByIds,\n  //   getSymbolSearchAll,\n  //   getSymbolSearchAndCount,\n  //   getSymbolSearchCount,\n  // ] = [\n  //   _getAccounts,\n  //   _getActivities,\n  //   _getBalances,\n  //   _getCandles,\n  //   _getExecutions,\n  //   _getMarkets,\n  //   _getMarketsQuotesStrategies,\n  //   _getOptionsById,\n  //   _getOrders,\n  //   _getOrdersByIds,\n  //   _getPositions,\n  //   _getQuotesByIds,\n  //   _getQuotesOptionsbyFilterAndIds,\n  //   _getQuotesOptionsByIds,\n  //   _getQuotesOptionsFilter,\n  //   _getServerTime,\n  //   _getSymbolsByIds,\n  //   _getSymbolSearchAll,\n  //   _getSymbolSearchAndCount,\n  //   _getSymbolSearchCount,\n  // ];\n\n  const [\n    accounts,\n    activities,\n    balances,\n    candles,\n    executions,\n    markets,\n    marketsQuotesStrategies,\n    optionsById,\n    orders,\n    ordersByIds,\n    positions,\n    quotesByIds,\n    quotesOptionsbyFilterAndIds,\n    quotesOptionsByIds,\n    quotesOptionsFilter,\n    serverTime,\n    symbolsByIds,\n    symbolSearchAll,\n    symbolSearchAndCount,\n    symbolSearchCount,\n  ] = [\n    _getAccounts(credentials),\n    _getActivities(credentials),\n    _getBalances(credentials),\n    _getCandles(credentials),\n    _getExecutions(credentials),\n    _getMarkets(credentials),\n    _getMarketsQuotesStrategies(credentials),\n    _getOptionsById(credentials),\n    _getOrders(credentials),\n    _getOrdersByIds(credentials),\n    _getPositions(credentials),\n    _getQuotesByIds(credentials),\n    _getQuotesOptionsbyFilterAndIds(credentials),\n    _getQuotesOptionsByIds(credentials),\n    _getQuotesOptionsFilter(credentials),\n    _getServerTime(credentials),\n    _getSymbolsByIds(credentials),\n    _getSymbolSearchAll(credentials),\n    _getSymbolSearchAndCount(credentials),\n    _getSymbolSearchCount(credentials),\n  ];\n  // unused for the moment\n  void0(quotesOptionsbyFilterAndIds);\n\n  return {\n    async myBalances() {\n      return _myBalances(await balances());\n    },\n    currentAccount: credentials.accountNumber,\n    serverTime: credentials.serverTime || 'ERROR',\n\n    account: {\n      getActivities(startTime: string) {\n        return activities(startTime);\n      },\n      getOrders(stateFilter?: string) {\n        return orders(stateFilter);\n      },\n\n      async getOrdersByIds(orderId: number[]) {\n        return ordersByIds(orderId);\n      },\n      getExecutions(startTime: string) {\n        return executions(startTime);\n      },\n      async getBalances() {\n        return balances();\n      },\n      async getPositions() {\n        return positions();\n      },\n      async getAllAccounts() {\n        return accounts();\n      },\n      async getServerTime() {\n        return serverTime();\n      },\n    },\n    market: {\n      async getAllMarkets() {\n        return markets();\n      },\n      getCandlesByStockId(symbolID: number) {\n        return candles(symbolID);\n      },\n    },\n    getOptionsQuotes: {\n      async fromFilter(filters: OptionsFilters) {\n        return quotesOptionsFilter(filters);\n      },\n      async byOptionsIds(optionIds: number[]) {\n        return quotesOptionsByIds(optionIds);\n      },\n    },\n    getQuotes: {\n      async byStrategies(strategyVariantRequestData: StrategyVariantRequest) {\n        return marketsQuotesStrategies(strategyVariantRequestData);\n      },\n\n      async byStockIds(ids: number[]) {\n        return quotesByIds(ids);\n      },\n    },\n\n    getOptionChains: {\n      async byStockId(stockId: number) {\n        return optionsById(stockId);\n      },\n    },\n    getSymbols: {\n      async byStockIds(stockIds: number[]) {\n        return symbolsByIds(stockIds);\n      },\n    },\n    search: {\n      async stock(prefix: string, offset?: number) {\n        return symbolSearchAndCount(prefix, offset);\n      },\n      async allStocks(prefix: string, offset?: number) {\n        return symbolSearchAll(prefix, offset);\n      },\n      async countResults(prefix: string) {\n        return symbolSearchCount(prefix);\n      },\n    },\n  };\n};\n"]}